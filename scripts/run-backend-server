#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

PUBLISHED=false
PUBLISHED_FLAG=
RESTART=true

for i in "$@"
do
  case "${i}" in
    --published)
    PUBLISHED=true
    PUBLISHED_FLAG=$i
    shift
    ;;
  esac
  case "${i}" in
    --restart=no)
    RESTART=false
    shift
    ;;
  esac
done


# If servers are running and we don't need to restart, then don't
RUNNING=true
if [[ $(pgrep BwdServer -c) -eq 0 ]]; then RUNNING=false; fi
if [[ $(pgrep CronChecker -c) -eq 0 ]]; then RUNNING=false; fi
if [[ $(pgrep QueueWorker -c) -eq 0 ]]; then RUNNING=false; fi

if [[ $(pgrep BwdDangerServer -c) -eq 0 ]]; then RUNNING=false; fi


if [[ "${RUNNING}" == "true" && "${RESTART}" == "false" ]]; then
  echo "Servers are running and we don't need to restart"
  exit 0
fi

if [[ "$PUBLISHED" == "true" ]]; then
  BWDSERVER_BINPATH="backend/Build/out/BwdServer/Release/net7.0/linux-x64/publish"
  CRONCHECKER_BINPATH="backend/Build/out/CronChecker/Release/net7.0/linux-x64/publish"
  QUEUEWORKER_BINPATH="backend/Build/out/QueueWorker/Release/net7.0/linux-x64/publish"
  PRODEXEC_BINPATH="backend/Build/out/ProdExec/Release/net7.0/linux-x64/publish"
  LOCALEXEC_BINPATH="backend/Build/out/LocalExec/Release/net7.0/linux-x64/publish"

  BWDDANGERSERVER_BINPATH="backend/Build/out/BwdDangerServer/Release/net7.0/linux-x64/publish"
else
  BWDSERVER_BINPATH="backend/Build/out/BwdServer/Debug/net7.0"
  CRONCHECKER_BINPATH="backend/Build/out/CronChecker/Debug/net7.0"
  QUEUEWORKER_BINPATH="backend/Build/out/QueueWorker/Debug/net7.0"
  PRODEXEC_BINPATH="backend/Build/out/ProdExec/Debug/net7.0"
  LOCALEXEC_BINPATH="backend/Build/out/LocalExec/Debug/net7.0"

  BWDDANGERSERVER_BINPATH="backend/Build/out/BwdDangerServer/Debug/net7.0"
fi

LOGS="${DARK_CONFIG_RUNDIR}/logs"

BWDSERVER_EXE="${BWDSERVER_BINPATH}/BwdServer"
CRONCHECKER_EXE="${CRONCHECKER_BINPATH}/CronChecker"
QUEUEWORKER_EXE="${QUEUEWORKER_BINPATH}/QueueWorker"
PRODEXEC_EXE="${PRODEXEC_BINPATH}/ProdExec"
LOCALEXEC_EXE="${LOCALEXEC_BINPATH}/LocalExec"

BWDDANGERSERVER_EXE="${BWDDANGERSERVER_BINPATH}/BwdDangerServer"

# Stop the server processes
echo "Stopping servers"
sudo pkill -f "BwdServer" || true
sudo pkill -f "CronChecker" || true
sudo pkill -f "QueueWorker" || true
sudo pkill -f "BwdDangerServer" || true

./scripts/run-pubsub-emulator
./scripts/run-cloud-storage-emulator

echo "Waiting for postgres"
./scripts/devcontainer/_wait-for-background-services postgresql

# if it hasn't been compiled yet, wait for it
echo "Waiting for compiled servers"
for ((i=1;i<=1000;i++));
do
  if [[ ! -f "${BWDSERVER_EXE}" \
     || ! -f "${CRONCHECKER_EXE}" \
     || ! -f "${QUEUEWORKER_EXE}" \
     || ! -f "${PRODEXEC_EXE}" \
     || ! -f "${LOCALEXEC_EXE}" \
     || ! -f "${BWDDANGERSERVER_EXE}" ]]; then
    sleep 0.01
  fi
done
echo "Done waiting for compiled servers"

echo "Running migrations"
"${PRODEXEC_EXE}" migrations run > "$LOGS/migrations.log" 2>&1
./scripts/build/reload-packages $PUBLISHED_FLAG $PUBLISHED_FLAG
echo "Running bwdserver"
"${BWDSERVER_EXE}" > "$LOGS/bwdserver.log" 2>&1 &
echo "Running cronchecker"
"${CRONCHECKER_EXE}" > "$LOGS/cronchecker.log" 2>&1 &
echo "Running queueworker"
"${QUEUEWORKER_EXE}" > "$LOGS/queueworker.log" 2>&1 &

echo "Running bwddangerserver"
"${BWDDANGERSERVER_EXE}" > "$LOGS/bwddangerserver.log" 2>&1 &

#echo "Loading packages into dark canvas"
#./scripts/build/load-packages-into-dark-canvas $PUBLISHED_FLAG $PUBLISHED_FLAG

echo "Finished loading server"
