# TODO: tidy, and finally integrate into CI.

#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail


# This is run to replace the canvas and data at packages.darklang.com.
#
# First,
# - open a terminal, and make sure you're in the devcontainer
#   (`./scripts/run-in-docker bash`) if relevant
# - `gcloud auth login`
# - make sure your IP address is allow-listed in Yugabyte
# - you may need to `gcloud config set project darklang-next` at this point, if not already set)
#
# Then run this with `./scripts/deployment/replace-prod-packages 1`,
# and proceed with additional steps as you succeed.
#

db_username=$(gcloud secrets versions access latest --secret db-username)
db_password=$(gcloud secrets versions access latest --secret db-password)
db_host=pub-us-central1.1c39714c-062a-40f3-b7ba-e320fce7ca3d.gcp.ybdb.io
db_port=5433
db_name=yugabyte


exec_sql() {
  /home/dark/yugabyte/bin/ysqlsh \
    -a \
    "host=$db_host \
    port=$db_port \
    dbname=$db_name \
    user=$db_username \
    password=$db_password \
    sslmode=verify-full \
    sslrootcert=containers/yugabyte.crt" \
    -c "$1"
}

run_prod_exec() {
  DARK_CONFIG_DB_HOST=$db_host \
  DARK_CONFIG_DB_PORT=$db_port \
  DARK_CONFIG_DB_DBNAME=$db_name \
  DARK_CONFIG_DB_USER=$db_username \
  DARK_CONFIG_DB_PASSWORD=$db_password \
  DARK_CONFIG_TELEMETRY_EXPORTER=none \
  DARK_CONFIG_ROLLBAR_ENABLED=n \
  DARK_CONFIG_LAUNCHDARKLY_SDK_API_KEY=none \
  ./scripts/run-prod-exec "$@"
}


run_local_exec() {
  DARK_CONFIG_DB_HOST=$db_host \
  DARK_CONFIG_DB_PORT=$db_port \
  DARK_CONFIG_DB_DBNAME=$db_name \
  DARK_CONFIG_DB_USER=$db_username \
  DARK_CONFIG_DB_PASSWORD=$db_password \
  DARK_CONFIG_TELEMETRY_EXPORTER=none \
  DARK_CONFIG_ROLLBAR_ENABLED=n \
  DARK_CONFIG_LAUNCHDARKLY_SDK_API_KEY=none \
  ./scripts/run-local-exec "$@"
}


echo "1. Prove we can connect to the DB"
exec_sql "select 2 ;"

echo "2. Run migrations"
run_prod_exec migrations run
run_prod_exec migrations list

echo "3. Load packages into internal SQL tables"
# this will be used by BwdServer when _it_ needs to use package items
# , as we have a bit of a recursive dog-fooding problem.
run_local_exec load-packages-to-internal-sql-tables

echo "4. Parse, create, and fill in dark-packages canvas"
run_local_exec reload-dark-packages

echo "5. Connect dark-packages canvas to packages.darklang.com domain"
canvasID='11111111-1111-1111-1111-111111111112'
domain='packages.darklang.com'
exec_sql "INSERT INTO domains_v0 (canvas_id, domain) VALUES ('$canvasID'::uuid, '$domain')"
