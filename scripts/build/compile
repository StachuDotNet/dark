#!/usr/bin/env python3.12

import sys
import subprocess
import fnmatch
import time
import os
import pathspec
from pathlib import Path

run_tests = False
in_ci = os.getenv("CI") == "true"
optimize = in_ci

fsharp_thing_to_build = "fsdark.sln"
# sometimes it's handy to only build a specific project
#fsharp_thing_to_build = "tests/Tests"
#fsharp_thing_to_build = "src/LibExecution"

# Make io unbuffered
def flush(fn):

  def newfn(x):
    fn(x)
    sys.stdout.flush()

  return newfn


sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)


def run(start, bash):
  proc = subprocess.run(bash, shell=True)
  stop = time.time()
  success = proc.returncode == 0
  duration = "{:.2f}".format(stop - start)
  if success:
    print(f">> Success in {duration}s")
  else:
    print(f">> Failed in {duration}s")

  return success


###################
# Build logic
###################
def pretty_print(msg, color):
  print(f"\x1b[6;30;{str(color)}m\n$ {msg}\x1b[0m")


def run_backend(start, bash):
  pretty_print(bash, 42)
  return run(start, bash)


def run_test(start, bash):
  if run_tests:
    pretty_print(bash, 45)
    return run(start, bash)
  else:
    print("skipping tests")
    return True


def run_other(start, bash):
  pretty_print(bash, 46)
  return run(start, bash)


def is_script(f):
  filetype = subprocess.check_output(["file", f], encoding="utf-8")
  return "Bourne-Again" in filetype


# def copy_dark_wasm():
#   start = time.time()
#   if optimize:
#     dark_wasm = run_backend(
#         start,
#         "rsync -a backend/Build/out/Wasm/Release/net8.0/publish/wwwroot/_framework/ backend/static/dark_wasm/"
#     )
#   else:
#     dark_wasm = run_backend(
#         start,
#         "rsync -a backend/Build/out/Wasm/Debug/net8.0/wwwroot/_framework/ backend/static/dark_wasm/"
#     )
#   return dark_wasm


def shellcheck(f):
  start = time.time()
  result = run_backend(start, "scripts/linting/shellchecker " + f)
  return result


def yamllint(f):
  start = time.time()
  result = run_backend(start, "scripts/linting/yamllinter " + f)
  return result


def terraform_validate():
  start = time.time()
  result = run_backend(start, "cd tf && terraform validate")
  return result


def circleci_validate():
  start = time.time()
  return run_backend(start, "circleci config validate")


def build_parser():
  start = time.time()
  return run_other(start, "scripts/build/build-parser")

###########
# F#
###########


def backend_test():
  start = time.time()
  ci = "--verbosity detailed" if in_ci else "--verbosity normal"
  if optimize:
    configuration = " --published"
  else:
    configuration = ""
  build = f"scripts/run-backend-tests {configuration}"
  return run_test(start, build)


def fsharp_tool_restore():
  start = time.time()
  build = "./scripts/build/_dotnet-wrapper tool restore"

  return run_backend(start, build)


def fsharp_paket_install():
  start = time.time()
  build = "./scripts/build/_dotnet-wrapper paket install"
  return run_backend(start, build)


def fsharp_paket_restore():
  start = time.time()
  # We run paket restore to match the lock file
  ci = "--verbose" if in_ci else ""
  build = f"./scripts/build/_dotnet-wrapper paket restore {ci}"
  return run_backend(start, build)


# Builds are split into
# - dotnet tool restore: installs build tooling (paket)
# - dotnet paket restore: installs dependencies from paket.lock
# - dotnet paket install: installs dependencies from the internet, updates paket.lock
# - dotnet build: builds executables

# dotnet build is extremely slow by default. You can determine where time is
# spent by passing `/clp:PerformanceSummary` to `dotnet build`. When I ran it,
# most of the time was in determining dependencies between projects which can
# be disabled with `--no-dependencies`. Some time is also spent in "restoring"
# something - not quite sure what that does but it's clearly needed sometimes.

# The solution I went with was to try and figure out the places that need
# restore and dependencies; so far it's when changing an fsproj or sln file.
# Apart from that, we can build with these disabled.

# I found there was good speedup from using `-graph:True`. However, that makes
# the msbuild only build one project, afaict. There's something to be done
# there but I'm not sure what.


def backend_quick_build():
  start = time.time()
  if optimize:
    configuration = "Release"
    verbosity = "minimal"
    command = "publish"
  else:
    configuration = "Debug"
    verbosity = "minimal"
    command = "build"

  build = f"./scripts/build/_dotnet-wrapper {command} \
      /clp:ForceConsoleColor \
      --no-restore \
      --verbosity {verbosity} \
      --configuration {configuration} \
      {fsharp_thing_to_build}"

  result = run_backend(start, build)

  return result


def backend_full_build():
  start = time.time()
  if optimize:
    configuration = "Release"
    verbosity = "minimal"
    command = "publish"
  else:
    configuration = "Debug"
    verbosity = "minimal"
    command = "build"

  build = f"./scripts/build/_dotnet-wrapper {command} \
      /clp:ForceConsoleColor \
      --verbosity {verbosity} \
      --configuration {configuration} \
      {fsharp_thing_to_build}"

  result = run_backend(start, build)

  return result


def run_migrations():
  start = time.time()

  if optimize:
    configuration = " --published"
  else:
    configuration = ""
  return run_backend(start, f"scripts/run-prod-exec {configuration} migrations run")


def clear_local_db():
  start = time.time()
  return run_backend(start, "scripts/build/clear-db")


def reload_backend_server():
  start = time.time()
  if optimize:
    configuration = " --published"
  else:
    configuration = ""
  runserver = f"scripts/run-backend-server {configuration}"
  return run_backend(start, runserver)


def reload_all_packages():
  start = time.time()
  if optimize:
    configuration = " --published"
  else:
    configuration = ""
  return run_backend(start, f"scripts/build/reload-packages {configuration}")


class Should:
  def __init__(self):
    self.fsharp_tool_restore = False
    self.fsharp_paket_restore = False
    self.fsharp_paket_install = False
    #self.copy_dark_wasm = False TODO
    self.backend_quick_build = False
    self.backend_full_build = False
    self.backend_test = False
    self.reload_all_packages = False
    self.circleci_validate = False
    self.clear_local_db = False
    self.run_migrations = False
    self.reload_backend_server = False
    self.shellcheck = []
    self.yamllint = []
    self.terraform_validate = False
    self.build_parser = False


def execute(should):
  success = True

  # parser
  if should.build_parser:
    if not build_parser(): success = False


  # backend dependencies
  if should.fsharp_tool_restore:
    if not fsharp_tool_restore(): success = False
    should.fsharp_paket_restore |= success
    should.backend_full_build |= success

  if should.fsharp_paket_restore:
    if not fsharp_paket_restore(): success = False
    should.backend_full_build |= success

  if should.fsharp_paket_install:
    if not fsharp_paket_install(): success = False
    should.backend_full_build |= success

  # backend
  if should.backend_full_build:
    should.backend_quick_build = False  # no need to do both
    if not backend_full_build(): success = False
    #should.copy_dark_wasm |= success
    should.backend_test |= success
    should.clear_local_db |= success
    should.reload_backend_server |= success
    should.reload_all_packages |= success

  if should.backend_quick_build:
    if not backend_quick_build(): success = False
    #should.copy_dark_wasm |= success
    should.backend_test |= success
    should.reload_backend_server |= success
    should.reload_all_packages |= success

  # if should.copy_dark_wasm:
  #   if not copy_dark_wasm(): success = False

  # if should.reload_backend_server:
  #   if not reload_backend_server(): success = False

  # if should.clear_local_db:
  #   if not clear_local_db(): success = False
  #   should.run_migrations |= success
  #   should.reload_all_packages |= success

  # if should.run_migrations:
  #   if not run_migrations(): success = False

  # if should.reload_all_packages:
  #   if not reload_all_packages(): success = False

  # if should.backend_test:
  #   if not backend_test(): success = False



  # # misc validations and formatting checkers
  # if should.circleci_validate:
  #   if not circleci_validate(): success = False

  # if should.shellcheck != []:
  #   all_files = " ".join(should.shellcheck)
  #   if not shellcheck(all_files): success = False

  # if should.yamllint:
  #   if not all([yamllint(f) for f in should.yamllint]):
  #     success = False

  # if should.terraform_validate:
  #   if not terraform_validate(): success = False


  return success


def mark(should, f):
  if f == "backend/global.json" or \
      f == "backend/.config/dotnet-tools.json" or \
      f == "backend/Directory.Build.props":
    should.fsharp_tool_restore = True

  elif "backend/paket.dependencies" == f:
    should.fsharp_paket_install = True

  elif f.startswith("backend/") and f.endswith("paket.references"):
    should.fsharp_paket_restore = True

  elif f.startswith("backend/") and \
    (f.endswith(".fsproj") or f.endswith(".sln")):
    should.backend_full_build = True

  elif f.startswith("backend/") and \
       (f.endswith(".fs") or f.endswith(".fsi")):
    if in_ci:
      should.backend_full_build = True
    else:
      should.backend_quick_build = True

  elif f.startswith("backend/tests/"):
    should.backend_test = True

  elif f.startswith("packages/") and f.endswith(".dark"):
    should.reload_all_packages = True
    # refresh the server as the packages migh have been cached
    should.reload_backend_server = True

  elif f.startswith("canvases/") and f.endswith(".dark"):
    should.reload_all_packages = True

  elif f.startswith("backend/migrations/"):
    should.clear_local_db = True

  elif f == "scripts/run-backend-server":
    should.shellcheck += [f]
    should.reload_backend_server = True

  elif f == ".circleci/config.yml":
    should.circleci_validate = True

  elif f.startswith("tf/") and f.endswith(".tf"):
    should.terraform_validate = True

  elif (f.startswith("scripts/") or f.endswith(".sh")) and is_script(f):
    should.shellcheck += [f]

  elif f.endswith(".yml") or f.endswith(".yaml"):
    should.yamllint += [f]

  elif f == "tree-sitter-darklang/grammar.js":
    should.build_parser = True
    should.backend_quick_build = True

  else:
    print("non-build file: " + f, end='')

  return should

# Ignore .gitignore and also some custom files
def get_ignored_files():
  with open(".gitignore", 'r') as file:
    gitignores = file.readlines()

  ignores = [
        ".git/",
        "scripts/build/compile",
        "backend/serialization/",
        "tree-sitter-darklang/src/"
        "containers/",
        "Dockerfile",
        ".devcontainer/devcontainer.json"
        "*.tmp*",
        "*.md",
        "*.sw",
        "*/.#"
        "*~" ]

  all_ignores = gitignores + ignores
  return pathspec.GitIgnoreSpec.from_lines(all_ignores)

ignored_files = get_ignored_files()

def main():
  files = []
  for f in sys.argv[1:]:
    if f == "--test":
      global run_tests
      run_tests = True
    elif f == "--optimize":
      global optimize
      optimize = True
    else:
      f = os.path.relpath(f, "/home/dark/app")
      if not (ignored_files.match_file(f)):
        files.append(f)

  if len(files) > 0:
    pretty_print("Compiling: " + ", ".join(files), 43)

    should = Should()
    for f in files:
      mark(should, f)

    if execute(should):
      sys.exit(0)
    else:
      sys.exit(1)
  else:
    # Don't print as it can be overwhelming
    sys.exit(1)


main()
