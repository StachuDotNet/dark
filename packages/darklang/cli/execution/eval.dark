/// Eval command - evaluate Dark expressions
module Darklang.Cli.Eval


let execute (state: AppState) (args: List<String>) : AppState =
  match args with
  | [] ->
    help state
    state
  | _ ->
    let expr = Stdlib.String.join args " "
    match Builtin.cliEvaluateExpression expr with
    | Ok result ->
      Stdlib.printLine result
      state
    | Error err ->
      let prettyError = PrettyPrinter.RuntimeTypes.RuntimeError.toString err
      Stdlib.printLine $"Error: {prettyError}"
      state


let complete (_state: AppState) (_args: List<String>) : List<String> =
  // For eval completion, we could potentially complete function names, but for now keep it simple
  []


let help (_state: AppState) : Unit =
  [
    "Usage: eval <expression>"
    "Evaluate a Dark expression and display the result."
    ""
    "Examples:"
    "  eval 1L + 2L                     - Arithmetic operations"
    "  eval \"hello\" ++ \"world\"         - String concatenation"
    "  eval [1L; 2L; 3L] |> List.length  - List operations"
    "  eval Stdlib.String.length \"test\" - Function calls"
  ] |> Stdlib.printLines