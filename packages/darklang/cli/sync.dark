/// Sync commands for sharing patches with other developers
module Darklang.Cli.Sync

let execute (state: AppState) (args: List<String>) : AppState =
  match args with
  | [] ->
    Stdlib.printLine "Usage: sync <command> [args]"
    Stdlib.printLine ""
    Stdlib.printLine "Commands:"
    Stdlib.printLine "  status      Show sync status"
    Stdlib.printLine "  push        Send local patches to server"
    Stdlib.printLine "  pull        Get patches from server"
    Stdlib.printLine "  config      Show/set sync configuration"
    state

  | ["status"] ->
    let serverUrl = "http://localhost:3000"
    let connectionStatus = Builtin.devCollabHttpStatus serverUrl
    let isConnected = 
      match Stdlib.Dict.get connectionStatus "connected" with
      | Some "true" -> true
      | _ -> false
    
    let user = Database.getCurrentUser () |> Stdlib.Option.withDefault "Not authenticated"
    let localPatches = Database.loadPatches ()
    
    Stdlib.printLine "Sync Status:"
    Stdlib.printLine $"  Server: {serverUrl}"
    Stdlib.printLine $"  User: {user}"
    if isConnected then
      Stdlib.printLine "  Connection: ✅ Connected"
    else
      Stdlib.printLine "  Connection: ❌ Disconnected"
      let error = Stdlib.Dict.get connectionStatus "error" |> Stdlib.Option.withDefault "Unknown error"
      Stdlib.printLine $"  Error: {error}"
    Stdlib.printLine ""
    Stdlib.printLine $"Local patches: {Stdlib.Int64.toString (Stdlib.List.length localPatches)}"
    localPatches |> Stdlib.List.iter (fun patchId ->
      match Database.getPatchInfo patchId with
      | Some info ->
        let status = Stdlib.Dict.get info "status" |> Stdlib.Option.withDefault "unknown"
        let intent = Stdlib.Dict.get info "intent" |> Stdlib.Option.withDefault "No intent"
        Stdlib.printLine $"  - {patchId} ({status}): {intent}"
      | None ->
        Stdlib.printLine $"  - {patchId} (error loading)")
    Stdlib.printLine ""
    if isConnected then
      Stdlib.printLine "Next actions:"
      Stdlib.printLine "  - 'sync push' to send ready patches"
      Stdlib.printLine "  - 'sync pull' to get new patches"
    else
      Stdlib.printLine "Start server with: dark server start"
    state

  | ["push"] ->
    Stdlib.printLine "Pushing patches to server..."
    Stdlib.printLine ""
    Stdlib.printLine "Checking local patches..."
    Stdlib.printLine "  - ready-def456: ready ✅"
    Stdlib.printLine "  - draft-abc123: skipped (not ready)"
    Stdlib.printLine ""
    Stdlib.printLine "Uploading to dev.darklang.com..."
    Stdlib.printLine "✅ Pushed 1 patch successfully"
    Stdlib.printLine ""
    Stdlib.printLine "Patch available at:"
    Stdlib.printLine "  https://dev.darklang.com/patches/def456"
    state

  | ["pull"] ->
    Stdlib.printLine "Pulling patches from server..."
    Stdlib.printLine ""
    Stdlib.printLine "Checking for new patches..."
    Stdlib.printLine "Found 1 new patch:"
    Stdlib.printLine ""
    Stdlib.printLine "  📦 patch-89ab4e: \"Add List.filterMap\" by ocean"
    Stdlib.printLine "     Created: 5 mins ago"
    Stdlib.printLine "     Changes: +1 function"
    Stdlib.printLine ""
    Stdlib.printLine "Options:"
    Stdlib.printLine "  1. Auto-apply (recommended for trusted patches)"
    Stdlib.printLine "  2. Review first with 'patch view 89ab4e'"
    Stdlib.printLine "  3. Skip for now"
    Stdlib.printLine ""
    Stdlib.printLine "Choose [1/2/3]: "
    // TODO: In real implementation, this would wait for user input
    Stdlib.printLine "2"
    Stdlib.printLine ""
    Stdlib.printLine "✓ Patch downloaded for review"
    Stdlib.printLine "Use 'patch view 89ab4e' to inspect, then 'patch apply 89ab4e'"
    state

  | ["config"] ->
    Stdlib.printLine "Sync Configuration:"
    Stdlib.printLine ""
    Stdlib.printLine "Server Settings:"
    Stdlib.printLine "  URL: dev.darklang.com"
    Stdlib.printLine "  User: stachu"
    Stdlib.printLine "  Auth: ✅ Valid token"
    Stdlib.printLine ""
    Stdlib.printLine "Sync Settings:"
    Stdlib.printLine "  Auto-sync: disabled"
    Stdlib.printLine "  Auto-apply: prompt (safe)"
    Stdlib.printLine "  Conflict resolution: manual"
    Stdlib.printLine ""
    Stdlib.printLine "To change settings:"
    Stdlib.printLine "  sync config set auto-sync true"
    Stdlib.printLine "  sync config set auto-apply true"
    state

  | ["config"; "set"; setting; value] ->
    match setting with
    | "auto-sync" ->
      if value == "true" then
        Stdlib.printLine "✅ Auto-sync enabled"
        Stdlib.printLine "Patches will be automatically synced every 5 minutes"
      else
        Stdlib.printLine "✅ Auto-sync disabled"
        Stdlib.printLine "Manual sync required with 'sync push/pull'"
    | "auto-apply" ->
      if value == "true" then
        Stdlib.printLine "⚠️  Auto-apply enabled"
        Stdlib.printLine "New patches will be applied automatically (use with caution)"
      else
        Stdlib.printLine "✅ Auto-apply disabled"
        Stdlib.printLine "New patches will require manual review and apply"
    | _ ->
      Stdlib.printLine $"Unknown setting: {setting}"
      Stdlib.printLine "Available settings: auto-sync, auto-apply"
    state

  | _ ->
    Stdlib.printLine "Unknown sync command. Use 'sync' for help."
    state

let help (_state: AppState) : Unit =
  [
    "sync - Share patches with other developers"
    ""
    "Sync allows you to share your patches with other developers"
    "and receive their changes. It works with a central server that"
    "coordinates patch sharing between team members."
    ""
    "Basic workflow:"
    "  1. Make changes and create patches"
    "  2. 'patch ready' to mark patches for sharing"
    "  3. 'sync push' to send to server"
    "  4. 'sync pull' to get others' patches"
    "  5. 'patch apply <id>' to use their changes"
    ""
    "Safety features:"
    "  - Only 'ready' patches are shared"
    "  - Patches require manual apply by default"
    "  - Conflicts are detected and reported"
  ] |> Stdlib.printLines

let complete (state: AppState) (args: List<String>) : List<String> =
  match args with
  | [] ->
    ["status"; "push"; "pull"; "config"]
  | ["config"] ->
    ["set"]
  | ["config"; "set"] ->
    ["auto-sync"; "auto-apply"; "conflict-resolution"]
  | ["config"; "set"; "auto-sync"] ->
    ["true"; "false"]
  | ["config"; "set"; "auto-apply"] ->
    ["true"; "false"]
  | _ ->
    []