module Darklang =
  module Cli =
    type Command =
      | Help
      | RunFunction of fnName: String * args: List<String>
      | RunScript of String * List<String>
      | RunInstallOrUpdate
      | Uninstall
      | REPL
      | Invalid of List<String>

    // TODO migrate this to some ParseAndExecuteScript submodule
    type ExecutionError =
      { msg: String; metadata: Dict<String> }

    module ExecutionError =
      let toString (err: ExecutionError) : String =
        let metadataStr =
          err.metadata
          |> Stdlib.Dict.toList
          |> Stdlib.List.map (fun (k, v) -> $"- {k}: {v}")
          |> Stdlib.String.join "\n"
        $"Error: {err.msg}\n{metadataStr}"


    let parseArguments (args: List<String>) : Command =
      // Builtin.printLine "input something"
      // let something = Builtin.stdinReadLine ()
      // Builtin.printLine ("Something: " ++ something)

      match args with
      | [ "help" ] -> Command.Help

      | [ "uninstall" ] -> Command.Uninstall

      | [ "install" ] | [ "update" ]  -> Command.RunInstallOrUpdate

      | [ "repl" ] -> Command.REPL

      | thingToRun :: args ->
        if Stdlib.String.startsWith thingToRun "@" then
          let fnName = thingToRun |> Stdlib.String.dropFirst_v0 1L
          Command.RunFunction(fnName, args)
        else
          Command.RunScript(thingToRun, args)


      | _ ->
        Command.Invalid [ "Invalid arguments" ]



    let runFunction (fnName: String) (args: List<String>) : Int64 =
      let onMissing = LanguageTools.NameResolver.OnMissing.Allow
      let pm = LanguageTools.PackageManager.pm ()

      let (args, _unres) =
        args
        |> Stdlib.List.map (fun arg ->
          arg
          |> LanguageTools.Parser.parseToSimplifiedTree
          |> LanguageTools.Parser.parseFromTree
          |> Builtin.unwrap
          |> fun parsedFile ->
              match parsedFile with
              | SourceFile source -> source.exprsToEval)
        |> Stdlib.List.flatten
        |> Stdlib.List.map (fun arg ->
          LanguageTools.WrittenTypesToProgramTypes.Expr.toPT onMissing pm "" [] arg)
        |> Stdlib.List.unzip

      match Builtin.cliExecuteFunction fnName args with
      | Ok result ->
        Builtin.printLine result
        0L

      | Error err ->
        Builtin.printLine $"\n{err}"
        1L


    let runScript (scriptPath: String) (args: List<String>) : Int64 =
      match Builtin.fileRead scriptPath with
      | Ok script ->
        let scriptSourceCode = Stdlib.String.fromBytesWithReplacement script

        let result =
          Builtin.cliParseAndExecuteScript
            scriptPath
            scriptSourceCode
            args

        match result with
        | Ok exitCode -> exitCode
        | Error e ->
          Builtin.printLine (Darklang.PrettyPrinter.RuntimeTypes.RuntimeError.toString e)
          1L

      | Error e ->
        Builtin.printLine e
        1L


    let executeCommand (command: Command) : Int64 =
      match command with
      | Help ->
        // CLEANUP there's gotta be a cool way to structure this rather than align things.
        // maybe a tuple of (command, description) or something
        // , then measure the longest command and pad the rest to that length
        Builtin.printLine
          """Note: If the darklang CLI is installed, you can run commands using `dark [command]`.
If it is not installed, replace `dark` with the executable's path, like `./darklang-exe-path [command]`. \n
Usage:
dark help                                     Show this help message and exit

dark [function name]                          Run a function in the package manager
  i.e. `dark @Darklang.Stdlib.Bool.and true false`

dark [script path]                            Run a .dark script
  i.e. `dark ./my-script.dark`

dark install                                  Install the darklang CLI so it's available globally in your terminal

dark update                                   Update the darklang CLI to the latest version
"""

        0L

      | RunScript(scriptPath, args) -> runScript scriptPath args

      | RunFunction(fnName, args) -> runFunction fnName args

      | RunInstallOrUpdate ->
        Builtin.printLine "Installing/updating..."
        let host = (Stdlib.Cli.Host.getRuntimeHost ()) |> Builtin.unwrap

        match LocalInstall.Installation.installOrUpdateLatestRelease host with
        | Ok _ ->
          Builtin.printLine "Install/update complete"
          0L
        | Error e ->
          Builtin.printLine e
          1L

      | Uninstall ->
        Builtin.printLine "Are you sure you want to uninstall darklang cli? (y/n): "

        let response = Builtin.stdinReadLine ()

        if response == "y" || response == "Y" then
          Builtin.printLine "Uninstalling..."

          let r =
            (Stdlib.Cli.Host.getRuntimeHost ())
            |> Stdlib.Result.andThen (fun host ->
              LocalInstall.Uninstall.runUninstall host)

          match r with
          | Ok _ ->
            Builtin.printLine "Uninstall complete"
            0L
          | Error e ->
            Builtin.printLine e
            1L

        else
          Builtin.printLine "Uninstall cancelled"
          0L

      | REPL ->
        REPL.repl ()

      | Invalid args ->
        let args = args |> Stdlib.String.join " "

        Builtin.printLine
          $"Invalid command {args}. Use `dark help` for more information."

        1L


    let processNormally (args: List<String>) : Int64 =
      args |> parseArguments |> executeCommand

    let executeCliCommand (args: List<String>) : Int64 =
      if Stdlib.List.member_v0 args "--skip-self-update" then
        let newArgs =
          args |> Stdlib.List.filter (fun arg -> arg != "--skip-self-update")

        processNormally newArgs
      else
        match LocalInstall.selfUpdateIfRelevant () with
        | Ok _ -> processNormally args
        | Error e ->
          Builtin.printLine $"Failed to run self-update: {e}\nProceeding anyway."
          processNormally args