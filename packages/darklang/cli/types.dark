module Darklang =
  module Cli =
    module Types =
      type Msg =
        | ProcessInput of String
        | KeyPressed of key: Stdlib.Cli.Stdin.Key.Key * modifiers: Stdlib.Cli.Stdin.Modifiers.Modifiers * keyChar: Stdlib.Option.Option<String>
        | Exit

      type PackagePath =
        | Root
        | Module of owner: String * moduleName: String

      type EntityCategory =
        | Functions
        | Types  
        | Constants
        | Submodules

      type ViewMode =
        | CommandMode
        | InteractiveMode

      // Interactive viewing types
      type EntityDefinition =
        { name: String
          lines: List<String>
          scrollPosition: Int64 }

      type ViewContent =
        | ModuleView of EntityCategory * List<String> * Int64  // category, items, selectedIndex
        | EntityDefinitionView of EntityDefinition
        | TreeView of owner: String * modules: List<String> * selectedIndex: Int64 * depth: Int64

      type ViewingState =
        { moduleContent: LanguageTools.ProgramTypes.Search.SearchResults
          entityName: String
          selectedCategory: EntityCategory
          selectedItemIndex: Int64
          expandedCategories: List<EntityCategory>
          entityDefinition: Stdlib.Option.Option<EntityDefinition>
          entityCache: List<(String * EntityDefinition)>
          viewportScrollPosition: Int64
          // Tree-specific state
          treeMode: Bool
          treeDepth: Int64
          selectedTreeIndex: Int64 }

      type AppState = 
        { isExiting: Bool
          lastCommand: String
          output: String
          mainPrompt: String
          needsFullRedraw: Bool
          currentPath: PackagePath
          pathHistory: List<PackagePath>
          viewMode: ViewMode
          commandHistory: List<String>
          historyIndex: Int64
          // Interactive viewing state
          viewingState: Stdlib.Option.Option<ViewingState> }

      let initState () : AppState =
        AppState { isExiting = false; lastCommand = ""; output = ""; mainPrompt = ""; needsFullRedraw = true; currentPath = PackagePath.Root; pathHistory = []; viewMode = ViewMode.CommandMode; commandHistory = []; historyIndex = -1L; viewingState = Stdlib.Option.Option.None }

      // Helper to update state preserving package navigation fields
      let updateState (state: AppState) (isExiting: Bool) (lastCommand: String) (output: String) (mainPrompt: String) (needsFullRedraw: Bool) : AppState =
        AppState { isExiting = isExiting; lastCommand = lastCommand; output = output; mainPrompt = mainPrompt; needsFullRedraw = needsFullRedraw; currentPath = state.currentPath; pathHistory = state.pathHistory; viewMode = state.viewMode; commandHistory = state.commandHistory; historyIndex = state.historyIndex; viewingState = state.viewingState }