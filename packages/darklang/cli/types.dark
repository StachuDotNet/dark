module Darklang =
  module Cli =
    type Msg =
      | ProcessInput of String
      | KeyPressed of key: Stdlib.Cli.Stdin.Key.Key * modifiers: Stdlib.Cli.Stdin.Modifiers.Modifiers * keyChar: Stdlib.Option.Option<String>
      | Exit


    // App execution modes
    type AppMode =
      | InteractiveMode  // REPL-like experience (default)
      | CommandMode      // One-off command execution via CLI args

    // Interactive UI modes
    type InteractiveUIMode =
      | PromptMode        // Normal command prompt
      | TreeNavigationMode of TreeNavState  // Interactive tree navigation

    // Tree navigation state
    type TreeNavState =
      { startPath: PackagePath
        showIcons: Bool
        maxDepth: Int64
        selectedIndex: Int64
        expandedPaths: List<PackagePath>
        currentNodes: List<TreeNavNode>
        scrollOffset: Int64 }

    // Tree navigation node
    type TreeNavNode =
      { path: PackagePath
        name: String
        nodeType: TreeNodeType
        isExpanded: Bool
        entityCount: EntityCount
        depth: Int64 }

    type TreeNodeType =
      | RootNode
      | ModuleNode
      | FunctionNode
      | TypeNode
      | ConstantNode

    type EntityCount =
      { functions: Int64
        types: Int64
        constants: Int64 }

    // Package path as list of components (e.g., ["Darklang"; "Stdlib"; "List"])
    type PackagePath = List<String>

    type AppState =
      { isExiting: Bool
        lastCommand: String
        output: String
        mainPrompt: String
        needsFullRedraw: Bool
        currentPath: PackagePath
        pathHistory: List<PackagePath>
        appMode: AppMode
        uiMode: InteractiveUIMode
        commandHistory: List<String>
        historyIndex: Int64 }

    let initState () : AppState =
      AppState
        { isExiting = false
          lastCommand = ""
          output = ""
          mainPrompt = ""
          needsFullRedraw = true
          currentPath = []
          pathHistory = []
          appMode = AppMode.InteractiveMode  // Default to REPL mode
          uiMode = InteractiveUIMode.PromptMode  // Default to prompt mode
          commandHistory = []
          historyIndex = -1L }

    // Helper to update state preserving package navigation fields
    // CLEANUP needs better name
    let updateState (state: AppState) (isExiting: Bool) (lastCommand: String) (output: String) (mainPrompt: String) (needsFullRedraw: Bool) : AppState =
      { state with
          isExiting = isExiting
          lastCommand = lastCommand
          output = output
          mainPrompt = mainPrompt
          needsFullRedraw = needsFullRedraw }