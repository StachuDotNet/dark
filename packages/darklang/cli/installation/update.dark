module Darklang =
  module Cli =
    module Installation =
      module Update =
        let execute (state: AppState) (args: List<String>) : AppState =
          let currentVersion = Helpers.cliVersion ()
          let currentMode = Installation.System.getInstallationMode ()
          let host = (Stdlib.Cli.Host.getRuntimeHost ()) |> Builtin.unwrap

          match currentMode with
          | Installed ->
            Builtin.printLine $"Checking for updates from Darklang CLI {currentVersion}..."
            match Installation.System.updateIfAvailable currentVersion host with
            | Ok message ->
              Builtin.printLine (View.formatSuccess message)
              { state with lastCommand = "update"; output = "update success" }
            | Error e ->
              Builtin.printLine (View.formatError e)
              { state with lastCommand = "update"; output = "update failed" }
          | Portable ->
            let message = $"Running in portable mode from {Builtin.directoryCurrent ()}/.darklang\n\nTo update this portable executable, please download the latest release manually from:\nhttps://github.com/darklang/dark/releases\n\nFor automatic updates, consider running 'install' to set up global installation."
            Builtin.printLine (View.formatSuccess message)
            { state with lastCommand = "update"; output = "portable update info" }

        let help (state: AppState) : AppState =
          Builtin.printLine "Usage: update"
          Builtin.printLine "Update Darklang CLI to the latest version."
          Builtin.printLine ""
          Builtin.printLine "Checks GitHub for the latest release and updates the globally"
          Builtin.printLine "installed CLI. Only works for global installations."
          { state with lastCommand = "help update"; output = "update help displayed" }

        let complete (state: AppState) (args: List<String>) : List<String> =
          Completion.noArgsCompletion state args