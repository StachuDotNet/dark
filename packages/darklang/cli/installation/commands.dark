module Darklang =
  module Cli =
    module Installation =
      module Commands =
        // Re-export helper functions
        let cliVersion () : String = Helpers.cliVersion ()
        let getVersionInfo () : String = Helpers.getVersionInfo ()

        // Re-export install functions
        let executeInstall (state: AppState) (args: List<String>) : AppState =
          Install.execute state args
        let installHelp (state: AppState) : AppState = Install.help state
        let installComplete (state: AppState) (args: List<String>) : List<String> =
          Install.complete state args

        // Re-export update functions
        let executeUpdate (state: AppState) (args: List<String>) : AppState =
          Update.execute state args
        let updateHelp (state: AppState) : AppState = Update.help state
        let updateComplete (state: AppState) (args: List<String>) : List<String> =
          Update.complete state args

        // Re-export uninstall functions (from existing uninstall.dark)
        let executeUninstall (state: AppState) (args: List<String>) : AppState =
          Uninstall.execute state args
        let uninstallHelp (state: AppState) : AppState = Uninstall.help state
        let uninstallComplete (state: AppState) (args: List<String>) : List<String> =
          Uninstall.complete state args

        // Re-export status functions
        let executeStatus (state: AppState) (args: List<String>) : AppState =
          Status.execute state args
        let statusHelp (state: AppState) : AppState = Status.help state
        let statusComplete (state: AppState) (args: List<String>) : List<String> =
          Status.complete state args

        // Re-export version functions
        let executeVersion (state: AppState) (args: List<String>) : AppState =
          Version.execute state args
        let versionHelp (state: AppState) : AppState = Version.help state
        let versionComplete (state: AppState) (args: List<String>) : List<String> =
          Version.complete state args