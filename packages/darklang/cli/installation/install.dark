module Darklang.Cli.Installation.Install


let execute (state: AppState) (args: List<String>) : AppState =
  let host = (Stdlib.Cli.Host.getRuntimeHost ()) |> Builtin.unwrap
  let currentMode = Installation.System.getInstallationMode ()

  match currentMode with
  | Installed ->
    Stdlib.printLine (View.formatSuccess "Already installed globally")
    state
  | Portable ->
    let currentDir = Builtin.directoryCurrent ()

    if Installation.System.globalInstallationExists host then
      let homeDir = Config.getDarklangHomeDir host

      let message = $"Detected portable mode - you're running from {currentDir}/.darklang\nFound existing global installation at {homeDir}\n\nIf you'd like to update your global installation, please run `dark` rather than this portable executable."
      Stdlib.printLine (View.formatSuccess message)
      state
    else
      Stdlib.printLine "Choose installation method:"
      Stdlib.printLine "1. Copy this binary (for testing local changes)"
      Stdlib.printLine "2. Download latest release from GitHub"
      Stdlib.printLine "Choose option (1 or 2): "
      let choice = (Builtin.stdinReadLine ()) |> Stdlib.String.trim

      if choice == "1" then
        match Installation.System.installFromCurrentBinary host with
        | Ok message ->
          Stdlib.printLine (View.formatSuccess message)
          state
        | Error e ->
          Stdlib.printLine (View.formatError e)
          state
      else
        Stdlib.printLine "Installing globally..."
        match Installation.System.install host with
        | Ok message ->
          Stdlib.printLine (View.formatSuccess message)
          state
        | Error e ->
          Stdlib.printLine (View.formatError e)
          state


let complete (_state: AppState) (_args: List<String>) : List<String> =
  []


let help (state: AppState) : Unit =
  [
    "Usage: install"
    "Install Darklang CLI globally for system-wide access."
    ""
    "This command installs the CLI to ~/.darklang/bin/ and sets up"
    "shell configuration for global access."
  ] |> Stdlib.printLines
