module Darklang =
  module Cli =
    // Note: eventually, some commands might be things _besides_ user prompts
    // (based on a timer, or async activity happening, or file system watcher, etc.)
    module Command =
      // type Argument =
      //   { name: String
      //     type: string
      //     required: Bool
      //     defaultValue: Option<String> }

      // // which to use -- above or below?

      // type Argument =
      //   | Positional of name: String * description: String
      //   | Named of short: String * long: String * description: String * isFlag: Bool


      // type Example =
      //   { usage: String; description: String }


      type CommandDetails =
        { name: String
          description: String
          aliases: List<String>
          // Arguments that this command accepts
          arguments: List<String>
          // Execute the command with the given arguments
          execute: State -> String -> (State * List<Msg>)
          //arguments: List<Argument>
          //help: String
          //parent: Uuid
          //subcommands: List<Command> // or parent() and children() ?
          //example: List<Example>
          //parse: String ->
          // TODO: parse...
          // TODO: execute: 'Args -> List<Msg> // ?
          //execute: List<String> -> Unit
          }


      type GeneralCommand =
        | Status // if in the middle of something, will tell you
        | Quit

      // // available when in an 'app'
      // type AppCommand =
      //   | GoToApp of appID: Uuid
      //   | GoToHttpHandlers of appID: Uuid
      //   | GoToKVs of appID: Uuid



      // type AICommand =
      //   | Prompt
      //   | Chat
      //   | Assist // chat w/ bot that knows dark, available commands, and _helps you_
      //   | Listen
      //     //`listen` command -> listen to audio until you [stop somehow]
      //     //(say "stop listening"; hit some button"; etc)

      // type NavCommand =
      //   | GoToApp of appID: Uuid
      //   | ChangeDirectory
      //   | ListStuff
      //   | GoBack
      //   | Tree // alias 'matter'

      // type AccountCommand =
      //   | ShowAccountStatus
      //   | StartLogin
      //   | EnterUsernameAndPassword // TODO: collect
      //   | LogOut

      // type LocalInstallCommand =
      //   | ShowInstallInfo
      //   | Install // aliases "init", "setup"
      //   | Config
      //   | Uninstall

      // type ConfigCommand =
      //   | GoToConfig
      //   // TODO: show specific config values, adjust them, etc

      // type MatterCommand =
      //   | ShowDependencies
      //     // | `dependencies` and the other-direction equivalent (`usages`) should be available for types, fns, etc.
      //   | ShowUsages
      //   | Let
      //     // - let x = 1 places it in current context, but it can be moved _easily_ before commit
      //     //		in the REPL, if you type `let x =` without the RHS, it opens a dialog for you to fill in after?
      //     //or `let x = [1]`, and you step through the different 'fillable' boxes like that?
      //     //(you _could_ just type `let`, and have an interactive thing collect the name/LHS, in addition to the RHS)


      // type DevToolsCommand =
      //   | LanguageServer // "lang-server", alias ["lsp]. could accept a name/id


      type Command =
        | General of GeneralCommand
        //| Config of ConfigCommand
        //| Matter of MatterCommand
        //| App of AppCommand
        //| DevTools of DevToolsCommand


      /// Parses a command string into a command name and arguments
      let parseCommand (commandStr: String) : (String * String) =
        let trimmed = Stdlib.String.trim commandStr

        // Find the first space to separate command and args
        match Stdlib.String.indexOf trimmed " " with
        | Some index ->
          let name = Stdlib.String.slice trimmed 0L index
          let args = (Stdlib.String.dropFirst trimmed (index + 1L)) |> Stdlib.String.trim
          (name, args)
        | None ->
          // No space, just a command with no args
          (trimmed, "")


      /// CLI version string
      let cliVersion = "Darklang CLI (alpha)"

      /// Constructs a module prefix from owner and submodules
      let constructModulePrefix (owner: String) (submodules: List<String>) : String =
        match submodules with
        | [] -> owner
        | _ -> owner ++ "." ++ (Stdlib.String.join submodules ".")

      /// Extracts the module prefix from a fully qualified name
      let extractModulePrefix (fullyQualifiedName: String) : Stdlib.Option.Option<String> =
        match Stdlib.String.lastIndexOf fullyQualifiedName "." with
        | Some idx -> Stdlib.Option.Option.Some (Stdlib.String.slice fullyQualifiedName 0L idx)
        | None -> Stdlib.Option.Option.None

      /// Creates an error state with the given message
      let createErrorState (state: State) (message: String) : State =
        { state with commandResult = CommandResult.Error message }


      /// Formats a section of entities for display
      let formatEntitySection (sectionName: String) (entities: List<String>) : String =
        if Stdlib.List.isEmpty entities then
          $"{sectionName}:\n\n(none)\n"
        else
          $"{sectionName}:\n\n" ++ (Stdlib.String.join entities "\n") ++ "\n"

      let formatModuleContent (entityName: String) (moduleContent: LanguageTools.ProgramTypes.Search.SearchResults) : String =
        let functionsSection =
          formatEntitySection
            "functions"
            (moduleContent.fns
              |> Stdlib.List.map (fun fn -> LanguageTools.ProgramTypes.PackageFn.nameToString fn.name))

        let typesSection =
          formatEntitySection
            "types"
            (moduleContent.types
              |> Stdlib.List.map (fun typ -> LanguageTools.ProgramTypes.PackageType.nameToString typ.name))

        let constantsSection =
          formatEntitySection
            "constants"
            (moduleContent.constants
              |> Stdlib.List.map (fun c -> LanguageTools.ProgramTypes.PackageConstant.nameToString c.name))

        let submodulesSection =
          formatEntitySection
            "submodules"
            ((moduleContent.submodules
              |> Stdlib.List.map (fun m ->
                m
                |> Stdlib.List.map (fun s -> s |> Stdlib.String.join ".")))
              |> Stdlib.List.flatten)

        $"Module: {entityName}\n\n" ++
        functionsSection ++ "\n" ++
        typesSection ++ "\n" ++
        constantsSection ++ "\n" ++
        submodulesSection

      let createSearchQuery (currentModule: List<String>) (text: String) : LanguageTools.ProgramTypes.Search.SearchQuery =
        LanguageTools.ProgramTypes.Search.SearchQuery
          { currentModule = currentModule
            text = text
            searchDepth = LanguageTools.ProgramTypes.Search.SearchDepth.OnlyDirectDescendants
            entityTypes = [ LanguageTools.ProgramTypes.Search.EntityType.Module
                            LanguageTools.ProgramTypes.Search.EntityType.Type
                            LanguageTools.ProgramTypes.Search.EntityType.Fn
                            LanguageTools.ProgramTypes.Search.EntityType.Constant ] }

      /// Helper function to run a function from the package manager
      let runFunction (state: State) (fnName: String) (args: List<String>) : (State * List<Msg>) =
        let onMissing = LanguageTools.NameResolver.OnMissing.Allow
        let pm = LanguageTools.PackageManager.pm ()

        let (parsedArgs, _unres) =
          args
          |> Stdlib.List.map (fun arg ->
            arg
            |> LanguageTools.Parser.parseToSimplifiedTree
            |> LanguageTools.Parser.parseFromTree
            |> Builtin.unwrap
            |> fun parsedFile ->
                match parsedFile with
                | SourceFile source -> source.exprsToEval)
          |> Stdlib.List.flatten
          |> Stdlib.List.map (fun arg ->
            LanguageTools.WrittenTypesToProgramTypes.Expr.toPT onMissing pm "" [] arg)
          |> Stdlib.List.unzip

        match Builtin.cliExecuteFunction fnName parsedArgs with
        | Ok result ->
          let newState = { state with commandResult = CommandResult.Success result }
          (newState, [])
        | Error err ->
          let errStr = ExecutionError.toString err
          let newState = { state with commandResult = CommandResult.Error $"\n{errStr}" }
          (newState, [])


      /// Helper function to run a .dark script file
      let runScript (state: State) (scriptPath: String) (args: List<String>) : (State * List<Msg>) =
        match Builtin.fileRead scriptPath with
        | Ok script ->
          let scriptSourceCode = Stdlib.String.fromBytesWithReplacement script

          let result =
            Builtin.cliParseAndExecuteScript
              scriptPath
              scriptSourceCode
              args

          match result with
          | Ok exitCode ->
            let newState = { state with commandResult = CommandResult.Success $"Script executed with exit code: {exitCode |> Stdlib.Int64.toString}" }
            (newState, [])
          | Error e ->
            let prettyError = PrettyPrinter.RuntimeTypes.RuntimeError.toString e
            let newState = { state with commandResult = CommandResult.Error prettyError }
            (newState, [])
        | Error e ->
          let newState = { state with commandResult = CommandResult.Error e }
          (newState, [])


      /// Helper function to view an entity by its fully qualified name
      let viewEntityByName (state: State) (fullyQualifiedName: String) : (State * List<Msg>) =
        let modules = fullyQualifiedName |> Stdlib.String.split "." |> Stdlib.List.dropLast
        let text = fullyQualifiedName |> Stdlib.String.split "." |> Stdlib.List.last |> Builtin.unwrap

        let query = createSearchQuery modules text

        let moduleContent =
          LanguageTools.PackageManager.Search.search query


        match moduleContent.fns, moduleContent.types, moduleContent.constants with
        | [], [], [] ->
          let newState =
            { state with
                commandResult =
                  CommandResult.Error $"No entities found for: {fullyQualifiedName}" }

          (newState, [])

        | fns, [], [] ->
          let fn =
            fns
            |> Stdlib.List.filter (fun fn -> fn.name.name == text)
            |> Stdlib.List.head

          match fn with
          | None ->
            let newState =
              { state with
                  commandResult =
                    CommandResult.Error $"Function not found: {fullyQualifiedName}" }
            (newState, [])

          | Some fn ->
            let prettyPrinted = PrettyPrinter.ProgramTypes.packageFn fn

            let highlighted = Cli.SyntaxHighlighting.highlightCode prettyPrinted

            let newState =
              { state with
                  commandResult =
                    CommandResult.Success $"Function: {fullyQualifiedName}\n\n{highlighted}" }

            (newState, [])

        | [], types, [] ->
          let typ =
            types
            |> Stdlib.List.filter (fun typ -> typ.name.name == text)
            |> Stdlib.List.head

          match typ with
          | None ->
            let newState =
              { state with
                  commandResult =
                    CommandResult.Error $"Type not found: {fullyQualifiedName}" }
            (newState, [])

          | Some typ ->
            let prettyPrinted = PrettyPrinter.ProgramTypes.packageType typ

            let highlighted = Cli.SyntaxHighlighting.highlightCode prettyPrinted

            let newState =
              { state with
                  commandResult =
                    CommandResult.Success $"Type: {fullyQualifiedName}\n\n{highlighted}" }

            (newState, [])

        | [], [], constants ->
          let constant =
            constants
            |> Stdlib.List.filter (fun c -> c.name.name == text)
            |> Stdlib.List.head

          match constant with
          | None ->
            let newState =
              { state with
                  commandResult =
                    CommandResult.Error $"Constant not found: {fullyQualifiedName}" }
            (newState, [])
            s
          | Some constant ->
            let prettyPrinted = PrettyPrinter.ProgramTypes.packageConstant constant

            let highlighted = Cli.SyntaxHighlighting.highlightCode prettyPrinted

            let newState =
              { state with
                  commandResult =
                    CommandResult.Success $"Constant: {fullyQualifiedName}\n\n{highlighted}" }

            (newState, [])

        | _ -> (createErrorState state $"Entity not found: {fullyQualifiedName}", [])


      /// Returns commands available in the current state
      let getAvailableCommands (state: State) : List<CommandDetails> =
        let baseCommands = [
          // `quit`
          CommandDetails
            { name = "quit"
              description = "Exit the CLI"
              aliases = ["exit"; "q"]
              arguments = []
              execute = fun state _ -> (state, [Msg.Quit])
            }

          // `mode` - switch between interaction modes
          CommandDetails
            { name = "mode"
              description = "Change the interaction mode (non-interactive, regular, refresh-screen)"
              aliases = []
              arguments = ["[non-interactive|regular|refresh-screen]"]
              execute = fun state args ->
                let args = Stdlib.String.trim args

                if Stdlib.String.isEmpty args then
                  // No arguments, show current mode
                  let modeDisplay =
                    match state.interactionMode with
                    | NonInteractive -> "non-interactive"
                    | RefreshScreen -> "refresh-screen"
                    | Regular -> "regular"

                  let newState = { state with commandResult = CommandResult.Info $"Current interaction mode: {modeDisplay}\nAvailable modes: non-interactive, regular, refresh-screen" }
                  (newState, [])
                else
                  // Set the mode based on the argument
                  match Stdlib.String.toLowercase args with
                  | "non-interactive" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.NonInteractive
                          commandResult = CommandResult.Success "Switched to non-interactive mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | "regular" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.Regular
                          commandResult = CommandResult.Success "Switched to regular mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | "refresh-screen" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.RefreshScreen
                          commandResult = CommandResult.Success "Switched to refresh-screen mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | _ ->
                    let newState = { state with commandResult = CommandResult.Error $"Unknown mode: {args}\nAvailable modes: non-interactive, regular, refresh-screen" }
                    (newState, [])
            }

          // `help`
          CommandDetails
            { name = "help"
              description = "Show help information"
              aliases = []
              arguments = []
              execute = fun state _args ->
                // Get available commands for the current page
                let commands = getAvailableCommands state

                let maxNameLength =
                  commands
                  |> Stdlib.List.map (fun cmd -> Stdlib.String.length cmd.name)
                  |> Stdlib.List.fold 0L Stdlib.Int64.max

                let cmdNameDesc =
                  commands
                  |> Stdlib.List.map (fun cmd ->
                      let commandName = cmd.name ++ Stdlib.String.repeat " " (maxNameLength - Stdlib.String.length cmd.name)
                      $"{CliColors.purple}{commandName}{CliColors.reset}   {cmd.description}")

                let colorBar =
                  [ CliColors.purpleBg
                    CliColors.magentaBg
                    CliColors.lightPinkBg
                    CliColors.pinkBg;
                    CliColors.blueBg
                    CliColors.greenBg
                    CliColors.yellowBg
                    CliColors.brownBg;
                    CliColors.orangeBg
                    CliColors.peachBg
                    CliColors.salmonBg ]
                  |> Stdlib.List.map (fun color -> $"{color}  {CliColors.reset}")
                  |> Stdlib.String.join ""

                let helpText =
                   (Stdlib.List.append cmdNameDesc ["\n"; colorBar])
                   |> Stdlib.List.push $"Available commands:\n"

                let helpContent = combineLogoAndText logo helpText CliColors.darkGray
                let newState = { state with commandResult = CommandResult.Info helpContent }
                (newState, [])
            }

          // `version`
          CommandDetails
            { name = "version"
              description = "Show CLI version"
              aliases = ["v"]
              arguments = []
              execute = fun state _ ->
                let newState = { state with commandResult = CommandResult.Info cliVersion }
                (newState, [])
            }

          // View command
          // TODO this needs a lot of work.
          CommandDetails
            { name = "view"
              description = "View modules, types, functions, or constants"
              aliases = []
              arguments = ["[<moduleName> | <entityName>]"]
              execute = fun state args ->
                // didn't meet args
                // TODO this should totally be un-handled by the execute fn; why are we doing this here??
                if Stdlib.String.isEmpty args then
                  let newState =
                    { state with
                        commandResult = CommandResult.Info "Please specify an entity name or use 'module <moduleName>' to view a module"
                        needsFullRedraw = true }
                  (newState, [])

                else
                  let entityName = args

                  match state.currentPage with
                  | Root ->
                    let query = createSearchQuery (args |> Stdlib.String.split ".") ""

                    let moduleContent =
                      LanguageTools.PackageManager.Search.search query

                    // If all entities are empty, it means we are looking for a specific entity or the entity is not found
                    if Stdlib.List.isEmpty moduleContent.fns &&
                       Stdlib.List.isEmpty moduleContent.types &&
                       Stdlib.List.isEmpty moduleContent.constants then

                        viewEntityByName state entityName

                    else
                      let moduleView = formatModuleContent entityName moduleContent
                      let newState = { state with commandResult = CommandResult.Success moduleView }
                      (newState, [])

                  | Module(owner, submodules) ->
                    // Construct the fully qualified entity name
                    let modulePrefix = constructModulePrefix owner submodules
                    let fullyQualifiedName = modulePrefix ++ "." ++ entityName

                    // Check if the entity is a submodule
                    let moduleQuery = createSearchQuery (fullyQualifiedName |> Stdlib.String.split ".") ""

                    let moduleContent =
                      LanguageTools.PackageManager.Search.search moduleQuery

                    if Stdlib.List.isEmpty moduleContent.fns &&
                       Stdlib.List.isEmpty moduleContent.types &&
                       Stdlib.List.isEmpty moduleContent.constants then
                      // check if the entity is a function, type, or constant
                      viewEntityByName state fullyQualifiedName

                    else
                      let moduleView =
                        formatModuleContent fullyQualifiedName moduleContent

                      let newState = { state with commandResult = CommandResult.Success moduleView }
                      (newState, [])

                  | _ ->
                    // Not in a module context
                    let newState = { state with commandResult = CommandResult.Error "Please navigate to a module first to view entities" }
                    (newState, [])
            }

          // Clear command
          CommandDetails
            { name = "clear"
              description = "Clear the screen"
              aliases = ["cls"]
              arguments = []
              execute = fun state _ ->
                // \x1b starts the escape sequence, [2J clears the screen, [H moves cursor to top left
                let newState = { state with commandResult = CommandResult.Success "\x1b[2J\x1b[H"; needsFullRedraw = true }
                (newState, [])
            }

          // Status command
          CommandDetails
            { name = "status"
              description = "Show system status"
              aliases = []
              arguments = []
              execute = fun state _args ->
                //- logo
                //- version
                //- overview of local (and cached) data
                //- login status, account, access
                //- alerts
                //- running processes, servers, etc.
                // Generate status information
                let version = cliVersion
                let location =
                  // TODO this isn't what I was expecting... this always says we're at the CLI namespace...
                  PrettyPrinter.ProgramTypes.packageName "Darklang" [] "CLI"

                // Get the current location using the getPathDisplay function from navigation.dark
                let currentLocation = getPathDisplay state.currentPage

                // Format the interaction mode for display
                let modeDisplay =
                  match state.interactionMode with
                  | NonInteractive -> "Non-interactive"
                  | RefreshScreen -> "Refresh screen"
                  | Regular -> "Regular"

                let textContent =
                  [
                    $"{CliColors.magenta}Version:{CliColors.reset} {version}"
                    $"{CliColors.magenta}Location:{CliColors.reset} {currentLocation}"
                    $"{CliColors.magenta}Mode:{CliColors.reset} {modeDisplay}"
                    ""
                    $"Type {CliColors.gray}'help'{CliColors.reset} for available commands"
                  ] |> Stdlib.String.join "\n"
                //let statusInfo = combineLogoAndText logo textContent CliColors.purple

                let newState = { state with commandResult = CommandResult.Info textContent }
                (newState, [])
            }

          // Back command
          CommandDetails
            { name = "back"
              description = "Go back to the previous page"
              aliases = []
              arguments = []
              execute = fun state _ -> (state, [Msg.NavigateBack])
            }

          // Install command
          CommandDetails
            { name = "install"
              description = "Install the darklang CLI globally"
              aliases = []
              arguments = []
              execute = fun state _ ->
                Builtin.printLine "Installing..."
                let host = (Stdlib.Cli.Host.getRuntimeHost ()) |> Builtin.unwrap

                match LocalInstall.Installation.installOrUpdateLatestRelease host with
                | Ok _ ->
                  let newState = { state with commandResult = CommandResult.Success "Install complete" }
                  (newState, [])
                | Error e ->
                  let newState = { state with commandResult = CommandResult.Error e }
                  (newState, [])
            }

          // Update command
          CommandDetails
            { name = "update"
              description = "Update the darklang CLI to the latest version"
              aliases = []
              arguments = []
              execute = fun state _ ->
                Builtin.printLine "Updating..."
                let host = (Stdlib.Cli.Host.getRuntimeHost ()) |> Builtin.unwrap

                match LocalInstall.Installation.installOrUpdateLatestRelease host with
                | Ok _ ->
                  let newState = { state with commandResult = CommandResult.Success "Update complete" }
                  (newState, [])
                | Error e ->
                  let newState = { state with commandResult = CommandResult.Error e }
                  (newState, [])
            }

          // Uninstall command
          CommandDetails
            { name = "uninstall"
              description = "Uninstall the darklang CLI"
              aliases = []
              arguments = []
              execute = fun state _ ->
                Builtin.printLine "Are you sure you want to uninstall darklang cli? (y/n): "
                let response = Builtin.stdinReadLine ()

                if response == "y" || response == "Y" then
                  Builtin.printLine "Uninstalling..."
                  let r =
                    (Stdlib.Cli.Host.getRuntimeHost ())
                    |> Stdlib.Result.andThen (fun host ->
                      LocalInstall.Uninstall.runUninstall host)

                  match r with
                  | Ok _ ->
                    let newState = { state with commandResult = CommandResult.Success "Uninstall complete" }
                    (newState, [])
                  | Error e ->
                    let newState = { state with commandResult = CommandResult.Error e }
                    (newState, [])
                else
                  let newState = { state with commandResult = CommandResult.Info "Uninstall cancelled" }
                  (newState, [])
            }

          // Run function command
          CommandDetails
            { name = "run"
              description = "Run a function from the package manager or execute a script"
              aliases = []
              arguments = ["<@function_name args...> | <script_path args...>"]
              execute = fun state args ->
                let argsList = args |> Stdlib.String.split " "

                match argsList with
                | [] ->
                  let newState = { state with commandResult = CommandResult.Error "Please specify a function name (starting with @) or script path" }
                  (newState, [])

                | thingToRun :: restArgs ->
                  if Stdlib.String.startsWith thingToRun "@" then
                    // Function execution
                    let fnName = thingToRun |> Stdlib.String.dropFirst 1L
                    runFunction state fnName restArgs
                  else
                    // Script execution
                    runScript state thingToRun restArgs
            }
        ]

        // Context-specific commands
        let contextCommands =
          match state.currentPage with
          | Root
          | Module (_, _) ->
            [
              // `cd`
              CommandDetails
                { name = "cd"
                  description = "Change directory"
                  aliases = []
                  arguments = ["path"]
                  execute = fun state args ->
                    // Use the changeDirectory function from navigation.dark
                    changeDirectory state args
                }

              // `ls`
              CommandDetails
                { name = "ls"
                  description = "List items in current directory"
                  aliases = ["list"; "dir"; "pwd"]
                  arguments = [] // CLEANUP maybe an optional arg to `ls ..` or `ls subdir` or whatever
                  execute = fun state _args ->
                    // List items based on the current page
                    match state.currentPage with
                    | Root ->
                      // At root, just show categories
                      let items = ["modules"; "types"; "functions"; "constants"]
                      let listText = "Items in current directory:\n" ++ (Stdlib.String.join items "\n")
                      let newState = { state with commandResult = CommandResult.Success listText }
                      (newState, [])

                    | Module(owner, submodules) ->
                      // In a module, show all functions, types, and constants
                      // Construct the module prefix
                      let modulePrefix = constructModulePrefix owner submodules

                      let query = createSearchQuery (modulePrefix |> Stdlib.String.split ".") ""
                      let moduleContent = LanguageTools.PackageManager.Search.search query

                      let moduleView = formatModuleContent modulePrefix moduleContent

                      let newState = { state with commandResult = CommandResult.Success moduleView }
                      (newState, [])

                    | _ ->
                      // For other pages, show a message
                      let newState = { state with commandResult = CommandResult.Info "No items to display in this context" }
                      (newState, [])
                }

             // `eval <expression>`
              CommandDetails
                { name = "eval"
                  description = "Evaluate a Dark expression"
                  aliases = ["e"]
                  arguments = ["<expression>"]
                  execute = fun state args ->
                    if Stdlib.String.isEmpty args then
                      let newState = { state with commandResult = CommandResult.Error "Please provide an expression to evaluate. Example: eval 1L + 2L" }
                      (newState, [])
                    else
                      let expr = args
                      match Builtin.cliEvaluateExpression expr with
                      | Ok result ->
                        let newState = { state with commandResult = CommandResult.Success result }
                        (newState, [])
                      | Error err ->
                        let prettyError = PrettyPrinter.RuntimeTypes.RuntimeError.toString err
                        let newState = { state with commandResult = CommandResult.Error prettyError }
                        (newState, [])
                }
            ]
          // CLEANUP: when is this used?
          | Type _
          | Fn _
          | Constant _ ->
            [
              // View command
              CommandDetails
                { name = "view"
                  description = "View details of the current item"
                  aliases = []
                  arguments = ["[<entityName>]"]
                  execute = fun state args ->
                    if Stdlib.String.isEmpty args then
                      // No arguments, show details of the current item
                      match state.currentPage with
                      | Type name ->
                        // Get the type details
                        // Convert the name to a string that can be used for lookup
                        let typeName = LanguageTools.ProgramTypes.PackageType.nameToString name
                        match LanguageTools.PackageManager.Type.find typeName with
                        | Some typeId ->
                          match LanguageTools.PackageManager.Type.get typeId with
                          | Some packageType ->
                            // Pretty print the type details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageType packageType
                            let newState = { state with commandResult = CommandResult.Success $"Type: {typeName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Type details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Type not found" }
                          (newState, [])

                      | Fn name ->
                        // Get the function details
                        // Convert the name to a string that can be used for lookup
                        let fnName = LanguageTools.ProgramTypes.PackageFn.nameToString name
                        match LanguageTools.PackageManager.Function.find fnName with
                        | Some fnId ->
                          match LanguageTools.PackageManager.Function.get fnId with
                          | Some packageFn ->
                            // Pretty print the function details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageFn packageFn
                            let newState = { state with commandResult = CommandResult.Success $"Function: {fnName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Function details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Function not found" }
                          (newState, [])

                      | Constant name ->
                        // Get the constant details
                        // Convert the name to a string that can be used for lookup
                        let constName = LanguageTools.ProgramTypes.PackageConstant.nameToString name
                        match LanguageTools.PackageManager.Constant.find constName with
                        | Some constId ->
                          match LanguageTools.PackageManager.Constant.get constId with
                          | Some packageConst ->
                            // Pretty print the constant details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageConstant packageConst
                            let newState = { state with commandResult = CommandResult.Success $"Constant: {constName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Constant details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Constant not found" }
                          (newState, [])

                      | _ ->
                        let newState = { state with commandResult = CommandResult.Error "Nothing to view" }
                        (newState, [])
                    else
                      // View a specific entity
                      let entityName = args

                      // Get the current module context
                      match state.currentPage with
                      | Type name ->
                        // Extract module from the current type
                        let typeName = LanguageTools.ProgramTypes.PackageType.nameToString name
                        match extractModulePrefix typeName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | Fn name ->
                        // Extract module from the current function
                        let fnName = LanguageTools.ProgramTypes.PackageFn.nameToString name
                        match extractModulePrefix fnName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | Constant name ->
                        // Extract module from the current constant
                        let constName = LanguageTools.ProgramTypes.PackageConstant.nameToString name
                        match extractModulePrefix constName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | _ ->
                        let newState = { state with commandResult = CommandResult.Error "Not in a valid context to view entities" }
                        (newState, [])
                }
            ]

        Stdlib.List.append baseCommands contextCommands


      /// Finds a command by name or alias
      let findCommand (state: State) (name: String) : Stdlib.Option.Option<CommandDetails> =
        let lowerName = Stdlib.String.toLowercase name

        state
        |> getAvailableCommands
        |> Stdlib.List.findFirst (fun cmd ->
            cmd.name == lowerName || Stdlib.List.member_v0 cmd.aliases lowerName)


