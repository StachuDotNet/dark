module Darklang =
  module Cli =
    // Note: eventually, some commands might be things _besides_ user prompts
    // (based on a timer, or async activity happening, or file system watcher, etc.)
    module Command =
      // type Argument =
      //   { name: String
      //     type: string
      //     required: Bool
      //     defaultValue: Option<String> }

      // // which to use -- above or below?

      // type Argument =
      //   | Positional of name: String * description: String
      //   | Named of short: String * long: String * description: String * isFlag: Bool


      // type Example =
      //   { usage: String; description: String }


      type CommandDetails =
        { name: String
          description: String
          aliases: List<String>
          // Arguments that this command accepts
          arguments: List<String>
          // Execute the command with the given arguments
          execute: State -> String -> (State * List<Msg>)
          //arguments: List<Argument>
          //help: String
          //parent: Uuid
          //subcommands: List<Command> // or parent() and children() ?
          //example: List<Example>
          //parse: String ->
          // TODO: parse...
          // TODO: execute: 'Args -> List<Msg> // ?
          //execute: List<String> -> Unit
          }


      type GeneralCommand =
        | Status // if in the middle of something, will tell you
        | Quit

      // // available when in an 'app'
      // type AppCommand =
      //   | GoToApp of appID: Uuid
      //   | GoToHttpHandlers of appID: Uuid
      //   | GoToKVs of appID: Uuid



      // type AICommand =
      //   | Prompt
      //   | Chat
      //   | Assist // chat w/ bot that knows dark, available commands, and _helps you_
      //   | Listen
      //     //`listen` command -> listen to audio until you [stop somehow]
      //     //(say "stop listening"; hit some button"; etc)

      // type NavCommand =
      //   | GoToApp of appID: Uuid
      //   | ChangeDirectory
      //   | ListStuff
      //   | GoBack
      //   | Tree // alias 'matter'

      // type AccountCommand =
      //   | ShowAccountStatus
      //   | StartLogin
      //   | EnterUsernameAndPassword // TODO: collect
      //   | LogOut

      // type LocalInstallCommand =
      //   | ShowInstallInfo
      //   | Install // aliases "init", "setup"
      //   | Config
      //   | Uninstall

      // type ConfigCommand =
      //   | GoToConfig
      //   // TODO: show specific config values, adjust them, etc

      // type MatterCommand =
      //   | ShowDependencies
      //     // | `dependencies` and the other-direction equivalent (`usages`) should be available for types, fns, etc.
      //   | ShowUsages
      //   | Let
      //     // - let x = 1 places it in current context, but it can be moved _easily_ before commit
      //     //		in the REPL, if you type `let x =` without the RHS, it opens a dialog for you to fill in after?
      //     //or `let x = [1]`, and you step through the different 'fillable' boxes like that?
      //     //(you _could_ just type `let`, and have an interactive thing collect the name/LHS, in addition to the RHS)


      // type DevToolsCommand =
      //   | LanguageServer // "lang-server", alias ["lsp]. could accept a name/id


      type Command =
        | General of GeneralCommand
        //| Config of ConfigCommand
        //| Matter of MatterCommand
        //| App of AppCommand
        //| DevTools of DevToolsCommand


      /// Parses a command string into a command name and arguments
      let parseCommand (commandStr: String) : (String * String) =
        let trimmed = Stdlib.String.trim commandStr

        // Find the first space to separate command and args
        match Stdlib.String.indexOf trimmed " " with
        | Some index ->
          let name = Stdlib.String.slice trimmed 0L index
          let args = (Stdlib.String.dropFirst trimmed (index + 1L)) |> Stdlib.String.trim
          (name, args)
        | None ->
          // No space, just a command with no args
          (trimmed, "")


      /// CLI version string
      let cliVersion = "Darklang CLI v0.1.0"

      /// Constructs a module prefix from owner and submodules
      let constructModulePrefix (owner: String) (submodules: List<String>) : String =
        match submodules with
        | [] -> owner
        | _ -> owner ++ "." ++ (Stdlib.String.join submodules ".")

      /// Extracts the module prefix from a fully qualified name
      let extractModulePrefix (fullyQualifiedName: String) : Stdlib.Option.Option<String> =
        match Stdlib.String.lastIndexOf fullyQualifiedName "." with
        | Some idx -> Stdlib.Option.Option.Some (Stdlib.String.slice fullyQualifiedName 0L idx)
        | None -> Stdlib.Option.Option.None

      /// Creates an error state with the given message
      let createErrorState (state: State) (message: String) : State =
        { state with commandResult = CommandResult.Error message }

      /// Filters entities by module prefix and formats them for display
      let filterEntitiesByModule (allNames: List<String>) (modulePrefix: String) : List<String> =
        let fullPrefix = modulePrefix ++ "."
        allNames
        |> Stdlib.List.filter (fun name -> Stdlib.String.startsWith name fullPrefix)
        |> Stdlib.List.map (fun name ->
            let prefixLength = Stdlib.String.length fullPrefix
            Stdlib.String.dropFirst name prefixLength)
        |> Stdlib.List.sort

      /// Formats a section of entities for display
      let formatEntitySection (sectionName: String) (entities: List<String>) : String =
        if Stdlib.List.isEmpty entities then
          $"{sectionName}:\n\n(none)\n"
        else
          $"{sectionName}:\n\n" ++ (Stdlib.String.join entities "\n") ++ "\n"

      /// Helper function to view an entity by its fully qualified name
      let viewEntityByName (state: State) (fullyQualifiedName: String) : (State * List<Msg>) =
        // Try to find the entity as a function
        match LanguageTools.PackageManager.Function.find fullyQualifiedName with
        | Some fnId ->
          // Function found, get the details
          match LanguageTools.PackageManager.Function.get fnId with
          | Some packageFn ->
            // Pretty print the function details
            let prettyPrinted = PrettyPrinter.ProgramTypes.packageFn packageFn
            let newState = { state with commandResult = CommandResult.Success $"Function: {fullyQualifiedName}\n\n{prettyPrinted}" }
            (newState, [])
          | None ->
            (createErrorState state $"Function found but details could not be retrieved: {fullyQualifiedName}", [])
        | None ->
          // Try to find the entity as a type
          match LanguageTools.PackageManager.Type.find fullyQualifiedName with
          | Some typeId ->
            // Type found, get the details
            match LanguageTools.PackageManager.Type.get typeId with
            | Some packageType ->
              // Pretty print the type details
              let prettyPrinted = PrettyPrinter.ProgramTypes.packageType packageType
              let newState = { state with commandResult = CommandResult.Success $"Type: {fullyQualifiedName}\n\n{prettyPrinted}" }
              (newState, [])
            | None ->
              (createErrorState state $"Type found but details could not be retrieved: {fullyQualifiedName}", [])
          | None ->
            // Try to find the entity as a constant
            match LanguageTools.PackageManager.Constant.find fullyQualifiedName with
            | Some constId ->
              // Constant found, get the details
              match LanguageTools.PackageManager.Constant.get constId with
              | Some packageConst ->
                // Pretty print the constant details
                let prettyPrinted = PrettyPrinter.ProgramTypes.packageConstant packageConst
                let newState = { state with commandResult = CommandResult.Success $"Constant: {fullyQualifiedName}\n\n{prettyPrinted}" }
                (newState, [])
              | None ->
                (createErrorState state $"Constant found but details could not be retrieved: {fullyQualifiedName}", [])
            | None ->
              // Entity not found
              (createErrorState state $"Entity not found: {fullyQualifiedName}", [])


      /// Returns commands available in the current state
      let getAvailableCommands (state: State) : List<CommandDetails> =
        let baseCommands = [
          // `quit`
          CommandDetails
            { name = "quit"
              description = "Exit the CLI"
              aliases = ["exit"; "q"]
              arguments = []
              execute = fun state _ -> (state, [Msg.Quit])
            }

          // `mode` - switch between interaction modes
          CommandDetails
            { name = "mode"
              description = "Change the interaction mode (non-interactive, regular, refresh-screen)"
              aliases = []
              arguments = ["[non-interactive|regular|refresh-screen]"]
              execute = fun state args ->
                let trimmedArgs = Stdlib.String.trim args

                if Stdlib.String.isEmpty trimmedArgs then
                  // No arguments, show current mode
                  let modeDisplay =
                    match state.interactionMode with
                    | NonInteractive -> "non-interactive"
                    | RefreshScreen -> "refresh-screen"
                    | Regular -> "regular"

                  let newState = { state with commandResult = CommandResult.Info $"Current interaction mode: {modeDisplay}\nAvailable modes: non-interactive, regular, refresh-screen" }
                  (newState, [])
                else
                  // Set the mode based on the argument
                  match Stdlib.String.toLowercase trimmedArgs with
                  | "non-interactive" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.NonInteractive
                          commandResult = CommandResult.Success "Switched to non-interactive mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | "regular" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.Regular
                          commandResult = CommandResult.Success "Switched to regular mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | "refresh-screen" ->
                    let newState =
                      { state with
                          interactionMode = InteractionMode.RefreshScreen
                          commandResult = CommandResult.Success "Switched to refresh-screen mode"
                          needsFullRedraw = true }
                    (newState, [])
                  | _ ->
                    let newState = { state with commandResult = CommandResult.Error $"Unknown mode: {trimmedArgs}\nAvailable modes: non-interactive, regular, refresh-screen" }
                    (newState, [])
            }

          // `help`
          CommandDetails
            { name = "help"
              description = "Show help information"
              aliases = []
              arguments = []
              execute = fun state _args ->

                // Get available commands for the current page
                let commands = getAvailableCommands state

                // Format help text
                let helpText =
                  "Available commands:\n" ++
                  (commands
                  |> Stdlib.List.map (fun cmd -> $"  {cmd.name} - {cmd.description}")
                  |> Stdlib.String.join "\n")

                let newState = { state with commandResult = CommandResult.Info helpText }
                (newState, [])
            }

          // `version`
          CommandDetails
            { name = "version"
              description = "Show CLI version"
              aliases = ["v"]
              arguments = []
              execute = fun state _ ->
                let newState = { state with commandResult = CommandResult.Info cliVersion }
                (newState, [])
            }

          // View command
          // TODO this needs a lot of work.
          CommandDetails
            { name = "view"
              description = "View modules, types, functions, or constants"
              aliases = []
              arguments = ["[module <moduleName> | <entityName>]"]
              execute = fun state args ->
                // Parse the arguments
                let trimmedArgs = Stdlib.String.trim args

                // didn't meet args
                // TODO this should totally be un-handled by the execute fn; why are we doing this here??
                if Stdlib.String.isEmpty trimmedArgs then
                  let newState =
                    { state with
                        commandResult = CommandResult.Info "Please specify an entity name or use 'module <moduleName>' to view a module"
                        needsFullRedraw = true }
                  (newState, [])

                // arg-parsing that (TODO) shouldn't be here.
                else if Stdlib.String.startsWith trimmedArgs "module " then
                  // View module command
                  let moduleName = (Stdlib.String.dropFirst trimmedArgs 7L) |> Stdlib.String.trim

                  if Stdlib.String.isEmpty moduleName then
                    // No module name provided
                    let newState = { state with commandResult = CommandResult.Error "Module name is required" }
                    (newState, [])
                  else
                    // Get all functions from the package manager
                    let allFnNames = LanguageTools.PackageManager.Function.getAllFnNames()
                    let moduleFunctions = filterEntitiesByModule allFnNames moduleName

                    // Get all types from the package manager
                    // TODO: Implement when available
                    let allTypeNames = []
                    let moduleTypes = []

                    // Get all constants from the package manager
                    // TODO: Implement when available
                    let allConstantNames = []
                    let moduleConstants = []

                    // Format the output sections
                    let functionsSection = formatEntitySection "functions" moduleFunctions
                    let typesSection = formatEntitySection "types" moduleTypes
                    let constantsSection = formatEntitySection "constants" moduleConstants

                    // Combine all sections
                    let moduleView =
                      $"Module: {moduleName}\n\n" ++
                      functionsSection ++ "\n" ++
                      typesSection ++ "\n" ++
                      constantsSection

                    let newState = { state with commandResult = CommandResult.Success moduleView }
                    (newState, [])
                else
                  // View entity command
                  let entityName = trimmedArgs

                  // Check if we're in a module context
                  match state.currentPage with
                  | Module(owner, submodules) ->
                    // Construct the fully qualified entity name
                    let modulePrefix = constructModulePrefix owner submodules
                    let fullyQualifiedName = modulePrefix ++ "." ++ entityName

                    // Try to find the entity as a function
                    match LanguageTools.PackageManager.Function.find fullyQualifiedName with
                    | Some fnId ->
                      // Function found, get the details
                      match LanguageTools.PackageManager.Function.get fnId with
                      | Some packageFn ->
                        // Pretty print the function details
                        let prettyPrinted = PrettyPrinter.ProgramTypes.packageFn packageFn
                        let newState = { state with commandResult = CommandResult.Success $"Function: {fullyQualifiedName}\n\n{prettyPrinted}" }
                        (newState, [])
                      | None ->
                        let newState = { state with commandResult = CommandResult.Error $"Function found but details could not be retrieved: {fullyQualifiedName}" }
                        (newState, [])
                    | None ->
                      // Try to find the entity as a type
                      match LanguageTools.PackageManager.Type.find fullyQualifiedName with
                      | Some typeId ->
                        // Type found, get the details
                        match LanguageTools.PackageManager.Type.get typeId with
                        | Some packageType ->
                          // Pretty print the type details
                          let prettyPrinted = PrettyPrinter.ProgramTypes.packageType packageType
                          let newState = { state with commandResult = CommandResult.Success $"Type: {fullyQualifiedName}\n\n{prettyPrinted}" }
                          (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error $"Type found but details could not be retrieved: {fullyQualifiedName}" }
                          (newState, [])
                      | None ->
                        // Try to find the entity as a constant
                        match LanguageTools.PackageManager.Constant.find fullyQualifiedName with
                        | Some constId ->
                          // Constant found, get the details
                          match LanguageTools.PackageManager.Constant.get constId with
                          | Some packageConst ->
                            // Pretty print the constant details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageConstant packageConst
                            let newState = { state with commandResult = CommandResult.Success $"Constant: {fullyQualifiedName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error $"Constant found but details could not be retrieved: {fullyQualifiedName}" }
                            (newState, [])
                        | None ->
                          // Entity not found
                          let newState = { state with commandResult = CommandResult.Error $"Entity not found: {fullyQualifiedName}" }
                          (newState, [])
                  | _ ->
                    // Not in a module context
                    let newState = { state with commandResult = CommandResult.Error "Please navigate to a module first to view entities" }
                    (newState, [])
            }

          // Status command
          CommandDetails
            { name = "status"
              description = "Show system status"
              aliases = []
              arguments = []
              execute = fun state _args ->
                //- logo
                //- version
                //- overview of local (and cached) data
                //- login status, account, access
                //- alerts
                //- running processes, servers, etc.
                // Generate status information
                let version = cliVersion
                let location =
                  // TODO this isn't what I was expecting... this always says we're at the CLI namespace...
                  PrettyPrinter.ProgramTypes.packageName "Darklang" [] "CLI"

                // Get the current location using the getPathDisplay function from navigation.dark
                let currentLocation = getPathDisplay state.currentPage

                // Format the interaction mode for display
                let modeDisplay =
                  match state.interactionMode with
                  | NonInteractive -> "Non-interactive"
                  | RefreshScreen -> "Refresh screen"
                  | Regular -> "Regular"

                let statusInfo =
                  $"{version}\nCurrent location: {currentLocation}\n" ++
                  $"Interaction mode: {modeDisplay}\n" ++
                  $"Type 'help' for available commands"

                let newState = { state with commandResult = CommandResult.Info statusInfo }
                (newState, [])
            }

          // Back command
          CommandDetails
            { name = "back"
              description = "Go back to the previous page"
              aliases = []
              arguments = []
              execute = fun state _ -> (state, [Msg.NavigateBack])
            }
        ]

        // Context-specific commands
        let contextCommands =
          match state.currentPage with
          | Root
          | Module (_, _) ->
            [
              // `cd`
              CommandDetails
                { name = "cd"
                  description = "Change directory"
                  aliases = []
                  arguments = ["path"]
                  execute = fun state args ->
                    // Use the changeDirectory function from navigation.dark
                    changeDirectory state args
                }

              // `ls`
              CommandDetails
                { name = "ls"
                  description = "List items in current directory"
                  aliases = ["list"; "dir"; "pwd"]
                  arguments = [] // CLEANUP maybe an optional arg to `ls ..` or `ls subdir` or whatever
                  execute = fun state _args ->
                    // List items based on the current page
                    match state.currentPage with
                    | Root ->
                      // At root, just show categories
                      let items = ["modules"; "types"; "functions"; "constants"]
                      let listText = "Items in current directory:\n" ++ (Stdlib.String.join items "\n")
                      let newState = { state with commandResult = CommandResult.Success listText }
                      (newState, [])

                    | Module(owner, submodules) ->
                      // In a module, show all functions, types, and constants
                      // Construct the module prefix
                      let modulePrefix = constructModulePrefix owner submodules

                      // Get all functions from the package manager
                      let allFnNames = LanguageTools.PackageManager.Function.getAllFnNames()
                      let moduleFunctions = filterEntitiesByModule allFnNames modulePrefix

                      // TODO Get all types from the package manager
                      let allTypeNames = []
                      let moduleTypes = filterEntitiesByModule allTypeNames modulePrefix

                      // TODO Get all constants from the package manager
                      let allConstantNames = []
                      let moduleConstants = filterEntitiesByModule allConstantNames modulePrefix

                      // Format the output sections
                      let functionsSection = formatEntitySection "functions" moduleFunctions
                      let typesSection = formatEntitySection "types" moduleTypes
                      let constantsSection = formatEntitySection "constants" moduleConstants

                      // Combine all sections
                      let moduleView =
                        $"Module: {modulePrefix}\n\n" ++
                        functionsSection ++ "\n" ++
                        typesSection ++ "\n" ++
                        constantsSection

                      let newState = { state with commandResult = CommandResult.Success moduleView }
                      (newState, [])

                    | _ ->
                      // For other pages, show a message
                      let newState = { state with commandResult = CommandResult.Info "No items to display in this context" }
                      (newState, [])
                }
            ]

          | Type _
          | Fn _
          | Constant _ ->
            [
              // View command
              CommandDetails
                { name = "view"
                  description = "View details of the current item"
                  aliases = []
                  arguments = ["[<entityName>]"]
                  execute = fun state args ->
                    let trimmedArgs = Stdlib.String.trim args

                    if Stdlib.String.isEmpty trimmedArgs then
                      // No arguments, show details of the current item
                      match state.currentPage with
                      | Type name ->
                        // Get the type details
                        // Convert the name to a string that can be used for lookup
                        let typeName = LanguageTools.ProgramTypes.PackageType.nameToString name
                        match LanguageTools.PackageManager.Type.find typeName with
                        | Some typeId ->
                          match LanguageTools.PackageManager.Type.get typeId with
                          | Some packageType ->
                            // Pretty print the type details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageType packageType
                            let newState = { state with commandResult = CommandResult.Success $"Type: {typeName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Type details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Type not found" }
                          (newState, [])

                      | Fn name ->
                        // Get the function details
                        // Convert the name to a string that can be used for lookup
                        let fnName = LanguageTools.ProgramTypes.PackageFn.nameToString name
                        match LanguageTools.PackageManager.Function.find fnName with
                        | Some fnId ->
                          match LanguageTools.PackageManager.Function.get fnId with
                          | Some packageFn ->
                            // Pretty print the function details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageFn packageFn
                            let newState = { state with commandResult = CommandResult.Success $"Function: {fnName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Function details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Function not found" }
                          (newState, [])

                      | Constant name ->
                        // Get the constant details
                        // Convert the name to a string that can be used for lookup
                        let constName = LanguageTools.ProgramTypes.PackageConstant.nameToString name
                        match LanguageTools.PackageManager.Constant.find constName with
                        | Some constId ->
                          match LanguageTools.PackageManager.Constant.get constId with
                          | Some packageConst ->
                            // Pretty print the constant details
                            let prettyPrinted = PrettyPrinter.ProgramTypes.packageConstant packageConst
                            let newState = { state with commandResult = CommandResult.Success $"Constant: {constName}\n\n{prettyPrinted}" }
                            (newState, [])
                          | None ->
                            let newState = { state with commandResult = CommandResult.Error "Constant details could not be retrieved" }
                            (newState, [])
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Constant not found" }
                          (newState, [])

                      | _ ->
                        let newState = { state with commandResult = CommandResult.Error "Nothing to view" }
                        (newState, [])
                    else
                      // View a specific entity
                      let entityName = trimmedArgs

                      // Get the current module context
                      match state.currentPage with
                      | Type name ->
                        // Extract module from the current type
                        let typeName = LanguageTools.ProgramTypes.PackageType.nameToString name
                        match extractModulePrefix typeName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | Fn name ->
                        // Extract module from the current function
                        let fnName = LanguageTools.ProgramTypes.PackageFn.nameToString name
                        match extractModulePrefix fnName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | Constant name ->
                        // Extract module from the current constant
                        let constName = LanguageTools.ProgramTypes.PackageConstant.nameToString name
                        match extractModulePrefix constName with
                        | Some modulePrefix ->
                          let fullyQualifiedName = modulePrefix ++ "." ++ entityName
                          viewEntityByName state fullyQualifiedName
                        | None ->
                          let newState = { state with commandResult = CommandResult.Error "Cannot determine module context" }
                          (newState, [])

                      | _ ->
                        let newState = { state with commandResult = CommandResult.Error "Not in a valid context to view entities" }
                        (newState, [])
                }
            ]

        Stdlib.List.append baseCommands contextCommands


      /// Finds a command by name or alias
      let findCommand (state: State) (name: String) : Stdlib.Option.Option<CommandDetails> =
        let lowerName = Stdlib.String.toLowercase name

        state
        |> getAvailableCommands
        |> Stdlib.List.findFirst (fun cmd ->
            cmd.name == lowerName || Stdlib.List.member_v0 cmd.aliases lowerName)

      // /// Returns all available commands for a dummy state
      // let getAllCommands (): List<CommandDetails> =
      //   let dummyState =
      //     State
      //       { currentPage = Page.Root
      //         pageHistory = []
      //         mainPrompt = ""
      //         commandResult = CommandResult.Info "dummy" // TODO: default to status command or something
      //         isInteractive = true
      //         needsFullRedraw = true
      //         isExiting = false }
      //   getAvailableCommands dummyState

      // let cmdDetails (cmd: Command): CommandDetails =
      //   match cmd with
      //   | General(Quit) ->
      //     (getAllCommands())
      //     |> Stdlib.List.findFirst (fun c -> c.name == "quit")
      //     |> Builtin.unwrap

      //   | General(Status) ->
      //     (getAllCommands())
      //     |> Stdlib.List.findFirst (fun c -> c.name == "status")
      //     |> Builtin.unwrap