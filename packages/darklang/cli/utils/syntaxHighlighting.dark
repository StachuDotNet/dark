module Darklang.Cli.SyntaxHighlighting


/// Maps semantic token types to CLI colors
let tokenTypeToCliColor (tokenType: LanguageTools.SemanticTokens.TokenType) : String =
  match tokenType with
  | Symbol -> Colors.blue
  | Keyword -> Colors.magenta

  | ModuleName -> Colors.brightBlack
  | TypeName -> Colors.brightBlue

  | Operator -> Colors.brightMagenta
  | String -> Colors.stringColor
  | Number -> Colors.numberColor
  | ParameterName -> Colors.brightBlue
  | VariableName -> Colors.white
  | FunctionName -> Colors.brightBlue

  | Comment -> Colors.commentColor

  | TypeParameter -> Colors.magenta
  | EnumMember -> Colors.magenta
  | Property -> Colors.white
  | Method -> Colors.blue
  | RegularExpression -> Colors.stringColor


/// Highlights a single line by inserting color codes at token positions
let highlightLine (line: String) (lineTokens: List<LanguageTools.SemanticTokens.SemanticToken>) : String =
  // create a list of color insertions: (position, colorCode)
  let insertions =
    lineTokens
    |> Stdlib.List.fold [] (fun acc token ->
        // extract start and end positions for the token
        let startPos = token.range.start.column
        let endPos = token.range.end_.column
        let color = tokenTypeToCliColor token.tokenType

        // add color start and reset positions
        let colorStart = (startPos, color)
        let colorEnd = (endPos, Colors.reset)

        Stdlib.List.append acc [colorStart; colorEnd])
  |> Stdlib.List.sortBy (fun (pos, _) -> pos)

  // apply insertions from right to left to avoid position shifts when inserting color codes
  let reversedInsertions = Stdlib.List.reverse insertions

  reversedInsertions
  |> Stdlib.List.fold line (fun currentLine (pos, colorCode) ->
      // validate insertion position is within current line bounds
      if pos >= 0L && pos <= Stdlib.String.length currentLine then
        let before = Stdlib.String.slice currentLine 0L pos // everything before the position
        let after = Stdlib.String.dropFirst currentLine pos // everything after the position
        // insert color code at the position
        before ++ colorCode ++ after
      else
        currentLine)


/// Takes the source code and all semantic tokens, returns the highlighted version
let applyTokenColors
  (sourceCode: String)
  (tokens: List<LanguageTools.SemanticTokens.SemanticToken>)
  : String =
  // Sort tokens by both row and column
  let sortedTokens =
    tokens
    |> Stdlib.List.sortBy (fun token -> (token.range.start.row, token.range.start.column))

  let lines = Stdlib.String.split sourceCode "\n"

  lines
  |> Stdlib.List.indexedMap (fun lineIndex line ->
    // For the current line, find all tokens that belong to it by filtering tokens where the row matches the current line index
    let lineTokens =
      sortedTokens
      |> Stdlib.List.filter (fun token -> token.range.start.row == lineIndex)

    if Stdlib.List.isEmpty lineTokens then
      line
    else
      highlightLine line lineTokens)
  |> Stdlib.String.join "\n"


let highlightCode (sourceCode: String) : String =
  let parsedTree = LanguageTools.Parser.parseToSimplifiedTree sourceCode

  match LanguageTools.Parser.parseFromTree parsedTree with
  | Ok parsedFile ->
    let tokens = LanguageTools.SemanticTokens.ParsedFile.tokenize parsedFile
    if Stdlib.List.isEmpty tokens then
      // TODO: create a fallback highlighting when parsing and tokenization fail
      Builtin.debug "what" parsedFile
      sourceCode
    else
      applyTokenColors sourceCode tokens

  | Error err ->
    Builtin.debug "err" err
    sourceCode