// Communication with clients for the Model Context Protocol

module Darklang =
  module ModelContextProtocol =
    /// Types of messages that can be received from clients
    type IncomingMessage =
      // Lifecycle
      | InitializeRequest of requestId: JsonRPC.RequestId
      | Initialized
      | Shutdown of requestId: JsonRPC.RequestId

      // Resources
      | ListResourcesRequest of requestId: JsonRPC.RequestId
      | ListResourceTemplatesRequest of requestId: JsonRPC.RequestId
      | ReadResourceRequest of
          requestId: JsonRPC.RequestId *
          ResourceRequest.ReadResourceParams.ReadResourceParams

      // Tools
      | ListToolsRequest of requestId: JsonRPC.RequestId
      | CallToolRequest of
          requestId: JsonRPC.RequestId *
          ToolRequest.CallToolParams.CallToolParams

      // Other
      | Other of JsonRPC.Request.Request

    /// Parse an incoming JSON-RPC message into an MCP message
    let parseIncomingMessage (r: JsonRPC.Request.Request) : IncomingMessage =
      match (r.method, r.id, r.params) with
      // Lifecycle
      | ("initialize", Some requestId, _) ->
          IncomingMessage.InitializeRequest requestId
      | ("initialized", None, _) ->
          IncomingMessage.Initialized
      | ("shutdown", Some requestId, _) ->
          IncomingMessage.Shutdown requestId

      // Resources
      | ("listResources", Some requestId, _) ->
          IncomingMessage.ListResourcesRequest requestId
      | ("listResourceTemplates", Some requestId, _) ->
          IncomingMessage.ListResourceTemplatesRequest requestId
      | ("readResource", Some requestId, Some(Object p)) ->
          (Stdlib.AltJson.Json.Object p)
          |> ResourceRequest.ReadResourceParams.fromJson
          |> Builtin.unwrap
          |> fun p -> IncomingMessage.ReadResourceRequest(requestId, p)

      // Tools
      | ("listTools", Some requestId, _) ->
          IncomingMessage.ListToolsRequest requestId
      | ("callTool", Some requestId, Some(Object p)) ->
          (Stdlib.AltJson.Json.Object p)
          |> ToolRequest.CallToolParams.fromJson
          |> Builtin.unwrap
          |> fun p -> IncomingMessage.CallToolRequest(requestId, p)

      // Other
      | _ -> IncomingMessage.Other r

    /// Resource-related request parameters and responses
    module ResourceRequest =
      /// Parameters for reading a resource
      module ReadResourceParams =
        type ReadResourceParams =
          { uri: ResourceUri }

        let fromJson (json: Json) : Stdlib.Result.Result<ReadResourceParams, String> =
          match json with
          | Object fields ->
            match Stdlib.List.findFirst fields (fun (k, _) -> k == "uri") with
            | Some (_, String uri) ->
                Stdlib.Result.Result.Ok (ReadResourceParams { uri = uri })
            | Some (_, _) ->
                Stdlib.Result.Result.Error "uri must be a string"
            | None ->
                Stdlib.Result.Result.Error "uri is required"
          | _ ->
              Stdlib.Result.Result.Error "params must be an object"

        let toJson (params: ReadResourceParams) : Json =
          Json.Object [
            ("uri", Json.String params.uri)
          ]

      /// Response for listing resources
      module ListResourcesResponse =
        type ListResourcesResponse =
          { resources: List<ResourceDescription> }

        let toJson (response: ListResourcesResponse) : Json =
          let resourcesJson =
            response.resources
            |> Stdlib.List.map (fun resource ->
              let fields = [
                ("uri", Json.String resource.uri);
                ("name", Json.String resource.name)
              ]

              let fieldsWithDescription =
                match resource.description with
                | Some desc ->
                    fields @ [("description", Json.String desc)]
                | None ->
                    fields

              let fieldsWithMimeType =
                match resource.mimeType with
                | Some mime ->
                    fieldsWithDescription @ [("mimeType", Json.String mime)]
                | None ->
                    fieldsWithDescription

              Json.Object fieldsWithMimeType
            )

          Json.Object [
            ("resources", Json.Array resourcesJson)
          ]

      /// Response for listing resource templates
      module ListResourceTemplatesResponse =
        type ListResourceTemplatesResponse =
          { resourceTemplates: List<ResourceTemplateDescription> }

        let toJson (response: ListResourceTemplatesResponse) : Json =
          let templatesJson =
            response.resourceTemplates
            |> Stdlib.List.map (fun template ->
              let fields = [
                ("uriTemplate", Json.String template.uriTemplate);
                ("name", Json.String template.name)
              ]

              let fieldsWithDescription =
                match template.description with
                | Some desc ->
                    fields @ [("description", Json.String desc)]
                | None ->
                    fields

              let fieldsWithMimeType =
                match template.mimeType with
                | Some mime ->
                    fieldsWithDescription @ [("mimeType", Json.String mime)]
                | None ->
                    fieldsWithDescription

              Json.Object fieldsWithMimeType
            )

          Json.Object [
            ("resourceTemplates", Json.Array templatesJson)
          ]

      /// Response for reading a resource
      module ReadResourceResponse =
        type ReadResourceResponse =
          { contents: List<ResourceContent> }

        let toJson (response: ReadResourceResponse) : Json =
          let contentsJson =
            response.contents
            |> Stdlib.List.map (fun content ->
              Json.Object [
                ("uri", Json.String content.uri);
                ("mimeType", Json.String content.mimeType);
                ("text", Json.String content.text)
              ]
            )

          Json.Object [
            ("contents", Json.Array contentsJson)
          ]

    /// Tool-related request parameters and responses
    module ToolRequest =
      /// Parameters for calling a tool
      module CallToolParams =
        type CallToolParams =
          { name: ToolId
            arguments: Json }

        let fromJson (json: Json) : Stdlib.Result.Result<CallToolParams, String> =
          match json with
          | Object fields ->
            let nameResult =
              match Stdlib.List.findFirst fields (fun (k, _) -> k == "name") with
              | Some (_, String name) -> Stdlib.Result.Result.Ok name
              | Some (_, _) -> Stdlib.Result.Result.Error "name must be a string"
              | None -> Stdlib.Result.Result.Error "name is required"

            let argsResult =
              match Stdlib.List.findFirst fields (fun (k, _) -> k == "arguments") with
              | Some (_, args) -> Stdlib.Result.Result.Ok args
              | None -> Stdlib.Result.Result.Error "arguments is required"

            match (nameResult, argsResult) with
            | (Ok name, Ok args) ->
                Stdlib.Result.Result.Ok (CallToolParams { name = name; arguments = args })
            | (Error e, _) -> Stdlib.Result.Result.Error e
            | (_, Error e) -> Stdlib.Result.Result.Error e
          | _ ->
              Stdlib.Result.Result.Error "params must be an object"

        let toJson (params: CallToolParams) : Json =
          Json.Object [
            ("name", Json.String params.name);
            ("arguments", params.arguments)
          ]

      /// Response for listing tools
      module ListToolsResponse =
        type ListToolsResponse =
          { tools: List<ToolDescription> }

        let toJson (response: ListToolsResponse) : Json =
          let toolsJson =
            response.tools
            |> Stdlib.List.map (fun tool ->
              let fields = [
                ("name", Json.String tool.name);
                ("description", Json.String tool.description);
                ("inputSchema", tool.inputSchema)
              ]

              let fieldsWithOutputSchema =
                match tool.outputSchema with
                | Some schema ->
                    fields @ [("outputSchema", schema)]
                | None ->
                    fields

              Json.Object fieldsWithOutputSchema
            )

          Json.Object [
            ("tools", Json.Array toolsJson)
          ]

      /// Response for calling a tool
      module CallToolResponse =
        type ContentItem =
          { type_: String
            text: String }

        type CallToolResponse =
          { content: List<CallToolResponse.ContentItem>
            isError: Stdlib.Option.Option<Bool> }

        let toJson (response: CallToolResponse.CallToolResponse) : Json =
          let contentJson =
            response.content
            |> Stdlib.List.map (fun item ->
              Json.Object [
                ("type", Json.String item.type_);
                ("text", Json.String item.text)
              ]
            )

          let fields = [
            ("content", Json.Array contentJson)
          ]

          let fieldsWithIsError =
            match response.isError with
            | Some isError ->
                fields @ [("isError", Json.Bool isError)]
            | None ->
                fields

          Json.Object fieldsWithIsError