module Darklang =
  module Cli =
    /// Returns a list of available command names based on the current state
    let getAvailableCommandNames (state: State) : List<String> =
      (Command.getAvailableCommands state)
      |> Stdlib.List.map (fun cmd -> cmd.name)


    /// Helper function to move the terminal cursor to the correct position
    let positionTerminalCursor (pathDisplay: String) (cursorPos: Int64): String =
      // Calculate the actual column position: path + "> " + cursor position
      let promptPrefix = $"{pathDisplay}> "
      let actualColumn = (Stdlib.String.length promptPrefix) + cursorPos + 1L // +1 for 1-based column numbering
      // \u001b[{column}G  = ANSI escape sequence to move cursor to specific column in current line
      $"\u001b[{actualColumn |> Stdlib.Int64.toString}G"

    /// Renders just the prompt line for incremental updates
    let renderPromptOnly (state: State): String =
      let pathDisplay = getPathDisplay state.currentPage

      // Get completion text to display in gray
      let completionText = Completion.getCompletionDisplay state

      // Build the prompt with completion
      let promptLine =
        if Stdlib.String.isEmpty completionText then
          $"{pathDisplay}> {state.mainPrompt}"
        else
          $"{pathDisplay}> {state.mainPrompt}{Colors.darkGray}{completionText}{Colors.reset}"

      let cursorPosition = positionTerminalCursor pathDisplay state.cursorPosition
      promptLine ++ cursorPosition


    /// Renders the current state to a string for display
    let render (state: State): String =
      match state.interactionMode with
      // Non-interactive mode: just return the command result without UI elements
      | NonInteractive ->
        match state.commandResult with
        | Success msg -> msg
        | Error msg -> $"Error: {msg}"
        | Info msg -> msg
        | None -> ""

      // Regular mode: include command result and prompt, but no available commands
      | Regular ->
        let promptRender = renderPromptOnly state

        // Format the command result
        let resultDisplay =
          match state.commandResult with
          | Success msg -> $"✓ {msg}"
          | Error msg -> $"✗ Error: {msg}"
          | Info msg -> msg
          | None -> ""

        // Combine parts with appropriate spacing
        let parts =
          if Stdlib.String.isEmpty resultDisplay then
            [promptRender]
          else
            [resultDisplay; ""; promptRender]

        parts
        |> Stdlib.List.filter (fun p -> Stdlib.Bool.not (Stdlib.String.isEmpty p))
        |> Stdlib.String.join "\n"

      // RefreshScreen mode (full UI): include command result, available commands, and prompt
      | RefreshScreen ->
        let promptRender = renderPromptOnly state

        // Format the command result
        let resultDisplay =
          match state.commandResult with
          | Success msg -> $"✓ {msg}"
          | Error msg -> $"✗ Error: {msg}"
          | Info msg -> msg
          | None -> ""

        [ resultDisplay; promptRender ]
        |> Stdlib.List.filter (fun p -> Stdlib.Bool.not (Stdlib.String.isEmpty p))
        |> Stdlib.String.join "\n"
