module Darklang =
  module Cli =
    module Completion =

      type CompletionContext =
        | CommandCompletion
        | ArgumentCompletion
        | EntityCompletion

      /// Case-insensitive string matching
      let caseInsensitiveStartsWith (text: String) (prefix: String): Bool =
        Stdlib.String.startsWith (Stdlib.String.toLowercase text) (Stdlib.String.toLowercase prefix)

      /// Filter list by prefix
      let filterByPrefix (items: List<String>) (prefix: String): List<String> =
        items
        |> Stdlib.List.filter (fun item -> caseInsensitiveStartsWith item prefix)
        |> Stdlib.List.sort

      /// Parse input into parts
      let parseInput (input: String) : (String * List<String> * String * Bool) =
        let trimmedInput = Stdlib.String.trim input
        let hasTrailingSpace = Stdlib.String.endsWith input " "
        let parts = Stdlib.String.split trimmedInput " "
        let command = (Stdlib.List.head parts) |> Stdlib.Option.withDefault ""
        let args = (Stdlib.List.tail parts) |> Stdlib.Option.withDefault []
        let lastArg = if hasTrailingSpace then "" else (Stdlib.List.last args) |> Stdlib.Option.withDefault ""
        (command, args, lastArg, hasTrailingSpace)

      /// Parse argument spec like "[refresh-screen|regular]" into options
      let parseArgumentOptions (argSpec: String): List<String> =
        if Stdlib.String.startsWith argSpec "[" && Stdlib.String.endsWith argSpec "]" then
          argSpec
          |> Stdlib.String.dropFirst 1L
          |> Stdlib.String.dropLast 1L
          |> Stdlib.String.split "|"
          |> Stdlib.List.map Stdlib.String.trim
        else
          []

      /// Check if command takes entity arguments (like view, cd, run)
      let commandTakesEntities (command: String): Bool =
        match command with
        | "view" | "cd" | "run" | "eval" -> true
        | _ -> false

      /// Figure out what kind of completion we need
      let determineCompletionContext (state: State) (input: String): CompletionContext =
        let (command, args, lastArg, hasTrailingSpace) = parseInput input

        if Stdlib.String.isEmpty command then
          CompletionContext.CommandCompletion
        else
          match Command.findCommand state command with
          | Some cmd ->
            if Stdlib.List.isEmpty args && Stdlib.Bool.not hasTrailingSpace then
              CompletionContext.CommandCompletion
            else if commandTakesEntities cmd.name then
              CompletionContext.EntityCompletion
            else
              CompletionContext.ArgumentCompletion
          | None ->
            CompletionContext.CommandCompletion

      /// Get module aliases (module name without owner)
      let getModuleAliases (): List<(String * String)> =
        let query = Command.createSearchQuery [] ""
        let moduleContent = LanguageTools.PackageManager.Search.search query

        match Stdlib.List.head moduleContent.submodules with
        | Some modulePathsList ->
          modulePathsList
          |> Stdlib.List.filterMap (fun modulePath ->
            match modulePath with
            | owner :: rest when Stdlib.List.length rest == 1L ->
              let shortName = Stdlib.String.join rest "."
              let fullName = Stdlib.String.join modulePath "."
              Stdlib.Option.Option.Some ((shortName, fullName))
            | _ -> Stdlib.Option.Option.None)
        | None -> []

      /// Resolve unqualified module name to fully-qualified name (e.g., "Stdlib" -> "Darklang.Stdlib")
      let resolveModuleName (moduleName: String): String =
        if Stdlib.String.contains moduleName "." then
          moduleName
        else
          let aliases = getModuleAliases ()
          match Stdlib.List.findFirst aliases (fun (shortName, _) -> shortName == moduleName) with
          | Some ((_, fullName)) -> fullName
          | None -> moduleName

      /// Get available modules for entity completion (returns short names)
      let getAvailableModules (): List<String> =
        let aliases = getModuleAliases ()
        let shortNames = aliases |> Stdlib.List.map (fun (shortName, _) -> shortName)
        Stdlib.List.append ["Darklang"] shortNames

      /// Get entities (functions, types, constants, submodules) from a module
      let getEntitiesFromModule (modulePath: String): List<String> =
        let parts = Stdlib.String.split modulePath "."
        let query = Command.createSearchQuery parts ""
        let moduleContent = LanguageTools.PackageManager.Search.search query

        let submodules =
          match Stdlib.List.head moduleContent.submodules with
            | Some modulePathsList ->
              modulePathsList
              |> Stdlib.List.filterMap (fun path ->
                if (Stdlib.List.length path) == (Stdlib.List.length parts) + 1L then
                  let pathPrefix = Stdlib.List.take path (Stdlib.List.length parts)
                  if pathPrefix == parts then
                    Stdlib.List.getAt path (Stdlib.List.length parts)
                  else
                    Stdlib.Option.Option.None
                else
                  Stdlib.Option.Option.None)
            | None -> []

        let functions = moduleContent.fns |> Stdlib.List.map (fun fn -> fn.name.name)
        let types = moduleContent.types |> Stdlib.List.map (fun typ -> typ.name.name)
        let constants = moduleContent.constants |> Stdlib.List.map (fun c -> c.name.name)

        Stdlib.List.flatten [submodules; functions; types; constants]

      /// Case 1: Complete command names
      let getCommandCompletions (state: State) (input: String): List<String> =
        let availableCommands = Command.getAvailableCommands state
        availableCommands
        |> Stdlib.List.map (fun cmd -> cmd.name)
        |> filterByPrefix input

      /// Case 2: Complete command arguments
      let getArgumentCompletions (cmd: Command.CommandDetails) (argIndex: Int64) (partialArg: String): List<String> =
        match Stdlib.List.getAt cmd.arguments argIndex with
        | Some argSpec ->
          let options = parseArgumentOptions argSpec
          if Stdlib.String.isEmpty partialArg then
            [argSpec]
          else
            filterByPrefix options partialArg
        | None -> []

      /// Case 3: Complete command arguments where the argument is an entity path
      let getEntityCompletions (state: State) (input: String): List<String> =
        // Remove @ prefix if present (for run command)
        let cleanInput =
          if Stdlib.String.startsWith input "@" then
            Stdlib.String.dropFirst input 1L
          else
            input

        if Stdlib.String.contains cleanInput "." then
          // Completing after a dot: Module.submodule or Module.function
          let parts = Stdlib.String.split cleanInput "."
          let entityFilter = (Stdlib.List.last parts) |> Stdlib.Option.withDefault ""
          let moduleParts = Stdlib.List.dropLast parts

          if Stdlib.List.isEmpty moduleParts then
            []
          else
            let modulePathInput = Stdlib.String.join moduleParts "."
            let resolvedModulePath = resolveModuleName modulePathInput
            let entities = getEntitiesFromModule resolvedModulePath
            filterByPrefix entities entityFilter
        else
          // Completing module name or entity in current context
          match state.currentPage with
          | Root ->
            let modules = getAvailableModules ()
            filterByPrefix modules cleanInput
          | Module(owner, submodules) ->
            let modulePrefix = Command.constructModulePrefix owner submodules
            let entities = getEntitiesFromModule modulePrefix
            filterByPrefix entities cleanInput
          | _ -> []

      /// Main completion logic
      let getCompletions (state: State) (input: String): List<String> =
        if Stdlib.String.isEmpty (Stdlib.String.trim input) then
          []
        else
          let (command, args, lastArg, hasTrailingSpace) = parseInput input
          let context = determineCompletionContext state input

          match context with
          | CommandCompletion ->
            getCommandCompletions state command
          | ArgumentCompletion ->
            match Command.findCommand state command with
            | Some cmd ->
              let argIndex =
                if hasTrailingSpace then
                  Stdlib.List.length args
                else
                  (Stdlib.List.length args) - 1L
              getArgumentCompletions cmd argIndex lastArg
            | None -> []
          | EntityCompletion ->
            if Stdlib.String.isEmpty lastArg then
              []
            else
              getEntityCompletions state lastArg

      /// Generate completion state from current input
      let generateCompletions (state: State): Stdlib.Option.Option<CompletionState> =
        let completions = getCompletions state state.mainPrompt

        match completions with
        | [] -> Stdlib.Option.Option.None
        | suggestions ->
          let completionState = CompletionState {
            suggestions = suggestions
            selectedIndex = 0L
            originalText = state.mainPrompt
            completionPrefix = state.mainPrompt
          }
          Stdlib.Option.Option.Some completionState

      /// Get the completion text to display (the grayed-out suggestion)
      let getCompletionDisplay (state: State): String =
        match state.completionState with
        | None -> ""
        | Some completion ->
          match Stdlib.List.getAt completion.suggestions completion.selectedIndex with
          | Some suggestion ->
            let (command, args, lastArg, hasTrailingSpace) = parseInput state.mainPrompt

            if Stdlib.String.contains state.mainPrompt " " then
              // Show completion for arguments
              if Stdlib.String.startsWith suggestion "[" then
                suggestion
              else
                let cleanLastArg =
                  if command == "run" && Stdlib.String.startsWith lastArg "@" then
                    Stdlib.String.dropFirst lastArg 1L
                  else
                    lastArg

                if Stdlib.String.contains cleanLastArg "." then
                  let dotParts = Stdlib.String.split cleanLastArg "."
                  let entityFilter = (Stdlib.List.last dotParts) |> Stdlib.Option.withDefault ""
                  if caseInsensitiveStartsWith suggestion entityFilter then
                    Stdlib.String.dropFirst suggestion (Stdlib.String.length entityFilter)
                  else
                    suggestion
                else if caseInsensitiveStartsWith suggestion cleanLastArg then
                  Stdlib.String.dropFirst suggestion (Stdlib.String.length cleanLastArg)
                else
                  suggestion
            else
              // Show completion for command names
              if caseInsensitiveStartsWith suggestion state.mainPrompt then
                Stdlib.String.dropFirst suggestion (Stdlib.String.length state.mainPrompt)
              else
                suggestion
          | None -> ""

      /// Apply the selected completion to the prompt
      let applyCompletion (state: State) (completion: CompletionState): State =
        match Stdlib.List.getAt completion.suggestions completion.selectedIndex with
        | Some selectedCompletion ->
          if Stdlib.String.startsWith selectedCompletion "[" then
            // This handles argument help specs that shouldn't be inserted into the prompt
            { state with completionState = Stdlib.Option.Option.None }
          else
            let (command, args, lastArg, hasTrailingSpace) = parseInput state.mainPrompt

            let newPrompt =
              if Stdlib.String.contains state.mainPrompt " " then
                // Completing arguments
                let commandParts = Stdlib.List.dropLast args
                let commandPrefix =
                  if Stdlib.List.isEmpty commandParts then
                    command ++ " "
                  else
                    command ++ " " ++ (Stdlib.String.join commandParts " ") ++ " "

                let prefix =
                  if command == "run" && Stdlib.String.startsWith lastArg "@" then
                    "@"
                  else
                    ""

                let finalCompletion =
                  if Stdlib.String.contains lastArg "." then
                    let cleanArg = Stdlib.String.dropFirst lastArg (Stdlib.String.length prefix)
                    let parts = Stdlib.String.split cleanArg "."
                    let moduleParts = Stdlib.List.dropLast parts
                    if Stdlib.List.isEmpty moduleParts then
                      resolveModuleName selectedCompletion
                    else
                      let modulePathInput = Stdlib.String.join moduleParts "."
                      let resolvedModulePath = resolveModuleName modulePathInput
                      resolvedModulePath ++ "." ++ selectedCompletion
                  else
                    resolveModuleName selectedCompletion

                commandPrefix ++ prefix ++ finalCompletion
              else
                // Completing command name
                selectedCompletion

            { state with
                mainPrompt = newPrompt
                cursorPosition = Stdlib.String.length newPrompt
                completionState = Stdlib.Option.Option.None }

        | None -> state
