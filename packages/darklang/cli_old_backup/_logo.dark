module Darklang =
  module Cli =
    let logo = $"""
  ????      ??????
????????   ????????
????????   ????????
 ??????    ????????
           ????????
  ????     ????????
????????   ????????
????????   ????????
 ??????     ??????

 ???         ????
   ????    ????????
   ????    ????????
 ???        ??????
 """


    let combineLogoAndText (logoStr: String) (textLines: List<String>) (color: String) : String =
      // Split the logo string by newlines
      let logoLines =
        (Stdlib.String.split logoStr "\n")

      // Find the maximum width of logo lines
      let maxLogoWidth =
        logoLines
        |> Stdlib.List.map Stdlib.String.length
        |> Stdlib.List.fold 0L (fun acc len -> if len > acc then len else acc)

      // Pad logo lines to same width
      let paddedLogoLines =
        logoLines
        |> Stdlib.List.map (fun line ->
          let paddedLine =
            match Stdlib.String.padEnd line " " maxLogoWidth with
            | Ok paddedLine -> paddedLine
            | Error _ -> line
          if Stdlib.String.isEmpty (Stdlib.String.trim line) then
            paddedLine
          else
            // Add color to non-empty lines
            $"{color}{paddedLine}{Colors.reset}")

      // Split the text lines by newlines
      let textLinesList =
        textLines
        |> Stdlib.List.map (fun line -> Stdlib.String.split line "\n")
        |> Stdlib.List.flatten

      let logoHeight = Stdlib.List.length paddedLogoLines
      let textHeight = Stdlib.List.length textLinesList

      // Calculate target height (maximum of both)
      let targetHeight = if logoHeight > textHeight then logoHeight else textHeight

      // make both logo and text the same height
      // Pad text to target height
      let finalLogoLines =
        if logoHeight < targetHeight then // e.g, 3 < 7 = true
          let totalPadding = targetHeight - logoHeight // 7 - 3 = 4 empty lines needed
          let paddingTop = Stdlib.Int64.divide totalPadding 2L // 4 รท 2 = 2 lines above
          let paddingBottom = totalPadding - paddingTop // 4 - 2 = 2 lines below
          let emptyLogoLine = Stdlib.String.repeat " " maxLogoWidth // if maxLogoWidth = 6, then emptyLogoLine = "      " (6 spaces)
          match Stdlib.List.repeat paddingTop emptyLogoLine with // Create 2 empty top logo lines
          | Ok topEmpty ->
            match Stdlib.List.repeat paddingBottom emptyLogoLine with // Create 2 empty bottom logo lines
            | Ok bottomEmpty ->
              Stdlib.List.flatten [topEmpty; paddedLogoLines; bottomEmpty]
            | Error _ -> paddedLogoLines
          | Error _ -> paddedLogoLines
        else
          paddedLogoLines

      // Pad text to target height
      let finalTextLines =
        if textHeight < targetHeight then
          let totalPadding = targetHeight - textHeight
          let paddingTop = Stdlib.Int64.divide totalPadding 2L
          let paddingBottom = totalPadding - paddingTop
          match Stdlib.List.repeat paddingTop "" with
          | Ok topEmpty ->
            match Stdlib.List.repeat paddingBottom "" with
            | Ok bottomEmpty ->
              Stdlib.List.flatten [topEmpty; textLinesList; bottomEmpty]
            | Error _ -> textLinesList
          | Error _ -> textLinesList
        else
          textLinesList

      // Combine logo and text with spacing
      let spacing = "          " // 10 spaces between logo and text

      match Stdlib.List.zip finalLogoLines finalTextLines with
      | Some zipped ->
        zipped
        |> Stdlib.List.map (fun (logoLine, textLine) -> logoLine ++ spacing ++ textLine)
        |> Stdlib.String.join "\n"
      | None ->
        // This should never happen since we ensured both lists are the same length
        ""
