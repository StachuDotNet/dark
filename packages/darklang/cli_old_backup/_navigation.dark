module Darklang =
  module Cli =
    /// Functions for handling navigation and displaying the current page

    /// Gets the path display for the current page
    let getPathDisplay (page: Page) : String =
      match page with
      | Root -> "/"
      | Module(owner, submodulePath) ->
        // Format the full module path with dots to represent the namespace hierarchy
        let moduleParts =
          match submodulePath with
          | [] -> [owner]
          | _ -> Stdlib.List.append [owner] submodulePath
        "/" ++ (Stdlib.String.join moduleParts ".")

      | Type(name) ->
        "/types/" ++ (PrettyPrinter.ProgramTypes.PackageType.nameToString name)

      | Fn(name) ->
        "/functions/" ++ (PrettyPrinter.ProgramTypes.PackageFn.nameToString name)

      | Constant(name) ->
        "/constants/" ++ (PrettyPrinter.ProgramTypes.PackageConstant.nameToString name)


    /// Navigate to a new page, updating the state
    let navigateTo (state: State) (page: Page) : State =
      let newHistory = Stdlib.List.push state.pageHistory state.currentPage
      { state with currentPage = page; pageHistory = newHistory }


    /// Navigate back to the previous page if there is one
    let navigateBack (state: State) : State =
      match state.pageHistory with
      | [] ->
        // No history, stay on current page
        state
      | prevPage :: remainingHistory ->
        // Go back to previous page
        { state with currentPage = prevPage; pageHistory = remainingHistory }


    //let getThingGivenCurrentLocationAndPathString

    /// Change directory to the specified path
    /// TODO maybe generalize this to "getThingGivenCurrentLocationAndPathString"
    /// , and have a separate (tiny) thing that actually _changes_ the path
    let changeDirectory (state: State) (path: String) : (State * List<Msg>) =
      // Parse the path argument
      let path = Stdlib.String.trim path

      // Determine the new page based on the path and current page
      let newPage =
        if path == "/" || path == "" then
          Page.Root
        else if path == ".." then
          // Go up one level
          match state.currentPage with
          | Root -> Page.Root
          | Module(owner, []) -> Page.Root
          | Module(owner, head :: tail) -> Page.Module(owner, tail)
          | _ -> Page.Root
        else
          // Navigate to the specified path
          match state.currentPage with
          | Root ->
            // From root, treat as module owner
            Page.Module(path, [])
          | Module(owner, subPath) ->
            // Add to current module path
            Page.Module(owner, Stdlib.List.pushBack subPath path)
          | _ ->
            // From other pages, go to root then to the path
            Page.Module(path, [])

      // Add a success message to show the navigation happened
      let pathDisplay = getPathDisplay newPage
      let newState = { state with commandResult = CommandResult.Success $"Changed directory to {pathDisplay}" }

      // Navigate to the new page
      (newState, [Msg.NavigateTo newPage])