module Darklang =
  module LanguageTools =
    module RuntimeTypes =
      // <aliases>
      type Option = Stdlib.Option.Option
      // </aliases>

      module FQTypeName =
        type Package = Uuid
        type FQTypeName = Package of Package

      module FQConstantName =
        type Builtin = { name: String; version: Int64 }
        type Package = Uuid

        type FQConstantName =
          | Builtin of Builtin
          | Package of Package

      module FQFnName =
        type Builtin = { name: String; version: Int64 }
        type Package = Uuid

        type FQFnName =
          | Builtin of Builtin
          | Package of Package


      type NameResolution<'a> = Stdlib.Result.Result<'a, RuntimeError>


      type TypeReference =
        | TUnit
        | TBool
        | TInt64
        | TUInt64
        | TInt8
        | TUInt8
        | TInt16
        | TUInt16
        | TInt32
        | TUInt32
        | TInt128
        | TUInt128
        | TFloat
        | TChar
        | TString
        | TUuid
        | TDateTime
        | TList of TypeReference
        | TTuple of TypeReference * TypeReference * List<TypeReference>
        | TFn of List<TypeReference> * TypeReference
        | TDB of TypeReference
        | TVariable of String
        | TCustomType of
          NameResolution<FQTypeName.FQTypeName> *
          typeArgs: List<TypeReference>
        | TDict of TypeReference

      type Expr =
        | EInt64 of ID * Int64
        | EUInt64 of ID * UInt64
        | EInt8 of ID * Int8
        | EUInt8 of ID * UInt8
        | EInt16 of ID * Int16
        | EUInt16 of ID * UInt16
        | EInt32 of ID * Int32
        | EUInt32 of ID * UInt32
        | EInt128 of ID * Int128
        | EUInt128 of ID * UInt128
        | EBool of ID * Bool
        | EString of ID * List<StringSegment>
        | EChar of ID * String
        | EFloat of ID * Float
        | EUnit of ID
        | EConstant of ID * FQConstantName.FQConstantName
        | ELet of ID * LetPattern * Expr * Expr
        | EIf of
          ID *
          cond: Expr *
          thenExpr: Expr *
          elseExpr: Stdlib.Option.Option<Expr>
        | ELambda of ID * List<ID * String> * Expr
        | ERecordFieldAccess of ID * Expr * String
        | EVariable of ID * String
        | EApply of ID * Expr * typeArgs: List<TypeReference> * args: List<Expr>
        | EFnName of ID * FQFnName.FQFnName
        | EList of ID * List<Expr>
        | ETuple of ID * Expr * Expr * List<Expr>
        | ERecord of ID * FQTypeName.FQTypeName * List<String * Expr>
        | ERecordUpdate of ID * record: Expr * updates: List<String * Expr>
        | EDict of ID * List<String * Expr>
        | EEnum of ID * FQTypeName.FQTypeName * caseName: String * fields: List<Expr>
        | EMatch of ID * Expr * List<MatchCase>
        | EAnd of ID * Expr * Expr
        | EOr of ID * Expr * Expr
        | EError of ID * RuntimeError * List<Expr>

      type MatchCase =
        { pat: MatchPattern
          whenCondition: Stdlib.Option.Option<Expr>
          rhs: Expr }

      type LetPattern =
        | LPVariable of ID * name: String
        | LPTuple of
          ID *
          first: LetPattern *
          second: LetPattern *
          theRest: List<LetPattern>

      type StringSegment =
        | StringText of String
        | StringInterpolation of Expr

      type MatchPattern =
        | MPVariable of ID * String
        | MPEnum of ID * caseName: String * fieldPatterns: List<MatchPattern>
        | MPInt64 of ID * Int64
        | MPUInt64 of ID * UInt64
        | MPInt8 of ID * Int8
        | MPUInt8 of ID * UInt8
        | MPInt16 of ID * Int16
        | MPUInt16 of ID * UInt16
        | MPInt32 of ID * Int32
        | MPUInt32 of ID * UInt32
        | MPInt128 of ID * Int128
        | MPUInt128 of ID * UInt128
        | MPBool of ID * Bool
        | MPChar of ID * String
        | MPString of ID * String
        | MPFloat of ID * Float
        | MPUnit of ID
        | MPTuple of ID * MatchPattern * MatchPattern * List<MatchPattern>
        | MPList of ID * List<MatchPattern>
        | MPListCons of ID * head: MatchPattern * tail: MatchPattern

      type DvalMap = Dict<Dval.Dval>

      type LambdaImpl =
        { typeSymbolTable: TypeSymbolTable
          symtable: Symtable
          parameters: List<ID * String>
          body: Expr }

      type FnValImpl =
        | Lambda of LambdaImpl
        | NamedFn of FQFnName.FQFnName

      type RuntimeError = RuntimeError of Dval.Dval

      type KnownType =
        | KTUnit
        | KTBool
        | KTInt64
        | KTUInt64
        | KTInt8
        | KTUInt8
        | KTInt16
        | KTUInt16
        | KTInt32
        | KTUInt32
        | KTInt128
        | KTUInt128
        | KTFloat
        | KTChar
        | KTString
        | KTUuid
        | KTDateTime
        | KTList of ValueType
        | KTTuple of ValueType * ValueType * List<ValueType>
        | KTFn of List<ValueType> * ValueType

        | KTDB of ValueType
        | KTCustomType of FQTypeName.FQTypeName * typeArgs: List<ValueType>

        | KTDict of ValueType

      type ValueType =
        | Unknown
        | Known of KnownType


      module Dval =
        type Dval =
          | DUnit
          | DBool of Bool
          | DInt64 of Int64
          | DUInt64 of UInt64
          | DInt8 of Int8
          | DUInt8 of UInt8
          | DInt16 of Int16
          | DUInt16 of UInt16
          | DInt32 of Int32
          | DUInt32 of UInt32
          | DInt128 of Int128
          | DUInt128 of UInt128
          | DFloat of Float
          | DChar of String
          | DString of String
          | DDateTime of DateTime
          | DUuid of Uuid

          | DList of ValueType * List<Dval>
          | DDict of ValueType * DvalMap
          | DTuple of Dval * Dval * List<Dval>

          | DFnVal of FnValImpl

          | DDB of String

          | DRecord of
            runtimeTypeName: FQTypeName.FQTypeName *
            sourceTypeName: FQTypeName.FQTypeName *
            typeArgs: List<ValueType> *
            fields: DvalMap

          | DEnum of
            runtimeTypeName: FQTypeName.FQTypeName *
            sourceTypeName: FQTypeName.FQTypeName *
            typeArgs: List<ValueType> *
            caseName: String *
            fields: List<Dval>


        let toValueType (dv: Dval) : ValueType =
          let dvalValueTypeTODO = ValueType.Unknown

          match dv with
          | DUnit -> ValueType.Known KnownType.KTUnit
          | DBool _ -> ValueType.Known KnownType.KTBool
          | DInt64 _ -> ValueType.Known KnownType.KTInt64
          | DUInt64 _ -> ValueType.Known KnownType.KTUInt64
          | DInt8 _ -> ValueType.Known KnownType.KTInt8
          | DUInt8 _ -> ValueType.Known KnownType.KTUInt8
          | DInt16 _ -> ValueType.Known KnownType.KTInt16
          | DUInt16 _ -> ValueType.Known KnownType.KTUInt16
          | DInt32 _ -> ValueType.Known KnownType.KTInt32
          | DUInt32 _ -> ValueType.Known KnownType.KTUInt32
          | DInt128 _ -> ValueType.Known KnownType.KTInt128
          | DUInt128 _ -> ValueType.Known KnownType.KTUInt128
          | DFloat _ -> ValueType.Known KnownType.KTFloat
          | DChar _ -> ValueType.Known KnownType.KTChar
          | DString _ -> ValueType.Known KnownType.KTString
          | DUuid _ -> ValueType.Known KnownType.KTUuid
          | DDateTime _ -> ValueType.Known KnownType.KTDateTime

          | DList(t, _) -> ValueType.Known(KnownType.KTList t)
          | DDict(t, _) -> ValueType.Known(KnownType.KTDict t)
          | DTuple(first, second, theRest) ->
            (KnownType.KTTuple(
              toValueType first,
              toValueType second,
              theRest |> Stdlib.List.map (fun item -> toValueType item)
            ))
            |> ValueType.Known

          | DRecord(typeName, _, typeArgs, fields) ->
            ValueType.Known(KnownType.KTCustomType(typeName, typeArgs))

          | DEnum(typeName, _, typeArgs, _caseName, _fields) ->
            ValueType.Known(KnownType.KTCustomType(typeName, typeArgs))

          | DFnVal fnImpl ->
            match fnImpl with
            | Lambda lambda ->
              let ps = Stdlib.List.map lambda.parameters (fun _ -> ValueType.Unknown)

              ValueType.Known(KnownType.KTFn(ps, ValueType.Unknown))

            // VTTODO look up type, etc?
            | NamedFn _named -> dvalValueTypeTODO

          // CLEANUP follow up when DDB has a typeReference
          // or look up the type of the DB by name
          | DDB _ -> ValueType.Unknown

      /// our record of any variable bindings in scope
      ///
      /// i.e. within the execution of `x+y` in
      ///  `let x = 1; let y = 2; x + y`
      /// , we would have a Symtable of
      ///   `{ "x" => DInt64 1; "y" => DInt64 2 }`
      type Symtable = Dict<Dval.Dval>

      type TypeSymbolTable = Dict<TypeReference>


      // Record the source of an incomplete or error. Would be useful to add more
      // information later, such as the iteration count that led to this, or
      // something like a stack trace
      type DvalSource =
        // We do not have context to supply an identifier
        | SourceNone

        // Caused by an expression of `id` within the given `tlid`
        | SourceID of TLID * ID

      type BuiltInParam =
        { name: String
          typ: TypeReference
          blockArgs: List<String>
          description: String }

      type Param = { name: String; typ: TypeReference }