module Darklang =
  module LanguageTools =
    module LspServer =
      let convertParserRangeToLspRange
        (range: Parser.Range)
        : LanguageServerProtocol.Range.Range =
        let lineStart = range.start.row |> Stdlib.UInt64.fromInt64 |> Builtin.unwrap

        let characterStart =
          range.start.column |> Stdlib.UInt64.fromInt64 |> Builtin.unwrap

        let lineEnd = range.end_.row |> Stdlib.UInt64.fromInt64 |> Builtin.unwrap

        let characterEnd =
          range.end_.column |> Stdlib.UInt64.fromInt64 |> Builtin.unwrap

        LanguageServerProtocol.Range.Range
          { start =
              LanguageServerProtocol.Position.Position
                { line = lineStart
                  character = characterStart }
            end_ =
              LanguageServerProtocol.Position.Position
                { line = lineEnd
                  character = characterEnd } }

      let createErrorDiagnostic
        (range: Parser.Range)
        (message: String)
        : LanguageServerProtocol.Diagnostic.Diagnostic =
        LanguageServerProtocol.Diagnostic.Diagnostic
          { range = convertParserRangeToLspRange range
            severity =
              Stdlib.Option.Option.Some
                LanguageServerProtocol.DiagnosticSeverity.DiagnosticSeverity.Error
            code = Stdlib.Option.Option.None
            codeDescription = Stdlib.Option.Option.None
            source = Stdlib.Option.Option.None
            message = message
            tags = Stdlib.Option.Option.None
            relatedInformation = Stdlib.Option.Option.None
            data = Stdlib.Option.Option.None }

      let sendDiagnostic
        (uri: LanguageServerProtocol.DocumentUri)
        (diagnostic:
          List<LanguageServerProtocol.Messages.PublishDiagnostics.PublishDiagnosticsParams.PublishDiagnosticsParams>)
        : Unit =
        let diagnosticsJson =
          LanguageServerProtocol
            .Messages
            .PublishDiagnostics
            .PublishDiagnosticsParams
            .toJson (
              LanguageServerProtocol.Messages.PublishDiagnostics.PublishDiagnosticsParams.PublishDiagnosticsParams
                { uri = uri
                  version = Stdlib.Option.Option.None
                  diagnostics = diagnostic }
            )

        (JsonRPC.Request.makeNotificationString
          "textDocument/publishDiagnostics"
          (diagnosticsJson |> Stdlib.Option.Option.Some))
        |> logAndSendToClient

      /// This is how we handle incoming requests from the client.
      ///
      /// (this is the core of Darklang's LSP server)
      let handleIncomingMessage
        (state: LspState)
        (r: JsonRPC.Request.Request)
        : LspState =
        let currentState =
          match LanguageServerProtocol.parseIncomingMessage r with
          | InitializeRequest ->
            log "TODO: fail - we shouldn't be seeing a second one of these"
            { state with initialized = true }

          | Initialized -> // notification or request?
            log "(ignore)"
            state

          | SetTrace -> // notification or request?
            log "TODO we should do something with this"
            state

          | Shutdown -> // notification or request?
            log "shutting down"
            { state with shouldShutdown = true }


          // -- textDocument synchronization
          | TextDocumentDidOpenNotification requestParams ->
            log $"adding/setting document {requestParams.textDocument.uri}"
            DocSync.handleTextDocumentDidOpen state requestParams

          | TextDocumentDidSaveNotification requestParams ->
            DocSync.handleTextDocumentDidSave state requestParams

          | TextDocumentDidCloseNotification requestParams ->
            log $"removing document from documentsInScope"
            DocSync.handleTextDocumentDidClose state requestParams


          // -- completion (autocomplete)
          | TextDocumentCompletionRequest(requestId, requestParams) ->
            log $"got completion request for {requestParams.textDocument.uri}"
            Completions.handleCompletionRequest state requestId requestParams


          // -- semantic tokens (which provides syntax highlighting)
          | TextDocumentSemanticTokensRequest(requestId, requestParams) ->
            log $"got semanticTokens request for {requestParams.textDocument.uri}"
            SemanticTokens.handleSemanticTokensRequest state requestId requestParams


          // -- other
          | Other jsonRpcRequest ->
            let r = jsonRpcRequest

            match (r.method, r.id, r.params) with
            | ("darklang/getRootNodes", Some requestId, None) ->
              TreeView.handleGetRootNodesRequest state requestId

            | ("darklang/getChildNodes",
               Some requestId,
               Some(Object [ ("nodeId", String nodeId) ])) ->
              TreeView.handleGetChildNodesRequest state requestId nodeId

            | other ->
              log $"TODO: we don't yet support this method: {r.method}"
              state

        state.documentsInScope
        |> Stdlib.Dict.iter (fun uri document ->
          match document.parsed with
          | Ok parsedFile ->
            match parsedFile with
            | CliScript parsed when parsed.unparseableStuff != [] ->
              let diagnostics =
                parsed.unparseableStuff
                |> Stdlib.List.map (fun unparseable ->
                  createErrorDiagnostic
                    unparseable.source.sourceRange
                    "Couldn't parse this part of the file")

              sendDiagnostic uri diagnostics
            | _ -> ()
          | _ -> ())

        currentState