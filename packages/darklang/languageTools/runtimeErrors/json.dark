module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      // <aliases>
      type ES =
        PACKAGE.Darklang.LanguageTools.RuntimeErrors.ErrorSegment.ErrorSegment
      // </aliases>

      module Json =
        type Error = UnsupportedType of RuntimeTypes.TypeReference

        let toSegments (e: Error) : ErrorOutput =
          match e with
          | UnsupportedType typ ->
            let summary =
              [ ES.String "Unsupported type in JSON: "; ES.TypeReference typ ]

            let extraExplanation =
              let parse =
                RuntimeTypes.FnName.FnName.BuiltIn(
                  RuntimeTypes.FnName.BuiltIn
                    { modules = [ "Json" ]
                      name = RuntimeTypes.FnName.Name.FnName "parse"
                      version = 0 }
                )

              let serialize =
                RuntimeTypes.FnName.FnName.BuiltIn(
                  RuntimeTypes.FnName.BuiltIn
                    { modules = [ "Json" ]
                      name = RuntimeTypes.FnName.Name.FnName "serialize"
                      version = 0 }
                )


              [ ES.String
                  ". Some types are not supported in Json serialization, and cannot be used as arguments to "
                ES.FunctionName parse
                ES.String " or "
                ES.FunctionName serialize ]

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = [ ES.TypeReference typ ]
                expected = [ ES.String "A supported type (Int, String, etc)" ] }