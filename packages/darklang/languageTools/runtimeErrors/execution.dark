module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      // <aliases>
      type ES =
        PACKAGE.Darklang.LanguageTools.RuntimeErrors.ErrorSegment.ErrorSegment
      // </aliases>

      module Execution =
        type Error =
          | MatchExprUnmatched of RuntimeTypes.Dval.Dval
          | MatchExprPatternWrongType of String * RuntimeTypes.Dval.Dval
          | MatchExprEnumPatternWrongCount of String * expected: Int * actual: Int
          | NonStringInStringInterpolation of RuntimeTypes.Dval.Dval
          | ConstDoesntExist of RuntimeTypes.ConstantName.ConstantName

        let toSegments (e: Error) : ErrorOutput =
          match e with
          | MatchExprUnmatched dv ->
            let summary = [ ES.String "No match for "; ES.InlineValue dv ]

            // TODO include patterns in error message
            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | MatchExprEnumPatternWrongCount(caseName, expected, actual) ->
            let summary =
              [ ES.String caseName
                ES.String " pattern is expecting "
                ES.Count(expected, ES.String "field", ES.String "fields")
                ES.String ", but "
                ES.String caseName
                ES.String " has "
                ES.Count(actual, ES.String "field", ES.String "fields") ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }


          | MatchExprPatternWrongType(patternType, dv) ->
            let summary =
              // "Cannot match Int value 6 with a Float pattern"
              [ ES.String "Cannot match "
                ES.TypeOfValue dv
                ES.String " value "
                ES.InlineValue dv
                ES.String " with "
                ES.IndefiniteArticle
                ES.String patternType
                ES.String " pattern" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          // Expected String in string interpolation, got 1.0
          | NonStringInStringInterpolation dv ->
            let summary =
              [ ES.String "Expected String in string interpolation, got "
                ES.InlineValue dv ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }

          | ConstDoesntExist name ->
            let summary =
              [ ES.String "Constant "
                ES.ConstantName name
                ES.String " doesn't exist" ]

            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }