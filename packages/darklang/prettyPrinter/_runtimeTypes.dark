module Darklang =
  module PrettyPrinter =
    module RuntimeTypes =
      let nameResolutionError
        (nr: LanguageTools.RuntimeErrors.NameResolution.Error)
        : String =
        match nr.errorType with
        | NotFound names -> Stdlib.String.join names "."
        | InvalidPackageName names -> Stdlib.String.join names "."
        | ExpectedEnumButNot ->
          "Unexpected: stringification of NRE in RT Pretty-Printer for ExpectedEnumButNot"
        | ExpectedRecordButNot ->
          "Unexpected: stringification of NRE in RT Pretty-Printer for ExpectedRecordButNot"
        | MissingEnumModuleName ->
          "Unexpected: stringification of NRE in RT Pretty-Printer for MissingEnumModuleName"


      let packageName
        (owner: String)
        (modules: List<String>)
        (name: String)
        : String =
        let modulesPart =
          match modules with
          | [] -> ""
          | modules ->
            let modules = Stdlib.String.join modules "."
            $"{modules}."

        match owner with
        | "Tests" -> $"{modulesPart}{name}"
        | _ -> $"PACKAGE.{owner}.{modulesPart}{name}"


      module FQTypeName =
        let package (id: LanguageTools.RuntimeTypes.FQTypeName.Package) : String =
          match LanguageTools.PackageManager.Type.get id with
          | Some p -> packageName p.name.owner p.name.modules p.name.name
          | None -> Stdlib.Uuid.toString p

      // TODO rename to fqtypeName?
      let typeName (t: LanguageTools.RuntimeTypes.FQTypeName.FQTypeName) : String =
        match t with
        | Package p -> FQTypeName.package p


      module FQConstantName =
        let builtIn (t: LanguageTools.RuntimeTypes.FQConstantName.Builtin) : String =
          let namePart = t.name

          let versionPart =
            if t.version == 0L then
              ""
            else
              $"_v{Stdlib.Int64.toString t.version}"

          $"{namePart}{versionPart}"

        let package
          (id: LanguageTools.RuntimeTypes.FQConstantName.Package)
          : String =
          match LanguageTools.PackageManager.Constant.get id with
          | Some p -> packageName p.name.owner p.name.modules p.name.name
          | None -> Stdlib.Uuid.toString p

      // TODO rename to fqconstantName?
      let constantName
        (t: LanguageTools.RuntimeTypes.FQConstantName.FQConstantName)
        : String =
        match t with
        | Builtin b -> FQConstantName.builtIn b
        | Package p -> FQConstantName.package p


      module FQFnName =
        let builtIn (t: LanguageTools.RuntimeTypes.FQFnName.Builtin) : String =
          let namePart = t.name

          let versionPart =
            if t.version == 0L then
              ""
            else
              $"_v{Stdlib.Int64.toString t.version}"

          $"{namePart}{versionPart}"

        let package (id: LanguageTools.RuntimeTypes.FQFnName.Package) : String =
          match LanguageTools.PackageManager.Function.get id with
          | Some p -> packageName p.name.owner p.name.modules p.name.name
          | None -> Stdlib.Uuid.toString p


      // TODO rename to fqfnName?
      let fnName (t: LanguageTools.RuntimeTypes.FQFnName.FQFnName) : String =
        match t with
        | Builtin b -> FQFnName.builtIn b
        | Package p -> FQFnName.package p

      let typeReference (t: LanguageTools.RuntimeTypes.TypeReference) : String =
        match t with
        | TUnit -> "Unit"
        | TBool -> "Bool"
        | TInt64 -> "Int64"
        | TUInt64 -> "UInt64"
        | TInt8 -> "Int8"
        | TUInt8 -> "UInt8"
        | TInt16 -> "Int16"
        | TUInt16 -> "UInt16"
        | TInt32 -> "Int32"
        | TUInt32 -> "UInt32"
        | TInt128 -> "Int128"
        | TUInt128 -> "UInt128"
        | TFloat -> "Float"
        | TChar -> "Char"
        | TString -> "String"
        | TUuid -> "Uuid"
        | TDateTime -> "DateTime"

        | TList inner -> $"List<{typeReference inner}>"
        | TDict inner -> $"Dict<{typeReference inner}>"
        | TTuple(first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item -> typeReference item)
          |> Stdlib.String.join " * "
          |> fun parts -> "(" ++ parts ++ ")"

        | TCustomType(typ, args) ->
          let argsPart =
            match args with
            | [] -> ""
            | args ->
              args
              |> Stdlib.List.map (fun arg -> typeReference arg)
              |> Stdlib.String.join ", "
              |> fun parts -> $"<{parts}>"

          let typeNamePart =
            match typ with
            | Ok name -> typeName name
            | Error e -> nameResolutionError e

          $"{typeNamePart}{argsPart}"

        | TFn(args, ret) ->
          let argPart =
            args
            |> Stdlib.List.map (fun arg -> typeReference arg)
            |> Stdlib.String.join ", "
            |> fun parts -> "(" ++ parts ++ ")"

          $"{argPart} -> {typeReference ret}"

        | TDB inner -> $"DB<{typeReference inner}>"

        | TVariable varName -> "'" ++ varName


      let knownType (t: LanguageTools.RuntimeTypes.KnownType) : String =
        match t with
        | KTUnit -> "Unit"
        | KTBool -> "Bool"
        | KTInt64 -> "Int64"
        | KTUInt64 -> "UInt64"
        | KTInt8 -> "Int8"
        | KTUInt8 -> "UInt8"
        | KTInt16 -> "Int16"
        | KTUInt16 -> "UInt16"
        | KTInt32 -> "Int32"
        | KTUInt32 -> "UInt32"
        | KTInt128 -> "Int128"
        | KTUInt128 -> "UInt128"
        | KTFloat -> "Float"
        | KTChar -> "Char"
        | KTString -> "String"
        | KTDateTime -> "DateTime"
        | KTUuid -> "Uuid"

        | KTList typ -> $"List<{valueType typ}>"
        | KTDict typ -> $"Dict<{valueType typ}>"
        | KTTuple(t1, t2, trest) ->
          (Stdlib.List.append [ t1; t2 ] trest)
          |> Stdlib.List.map (fun item -> valueType item)
          |> Stdlib.String.join ", "
          |> fun s -> $"({s})"

        | KTFn(argTypes, retType) ->
          (Stdlib.List.push argTypes retType)
          |> Stdlib.List.map (fun vt -> valueType vt)
          |> Stdlib.String.join " -> "

        | KTCustomType(name, typeArgs) ->
          let typeArgsPortion =
            match typeArgs with
            | [] -> ""
            | args ->
              args
              |> Stdlib.List.map (fun t -> valueType t)
              |> Stdlib.String.join ", "
              |> fun betweenBrackets -> "<" + betweenBrackets + ">"

          (typeName name) ++ typeArgsPortion

        | KTDB typ -> $"Datastore<{valueType typ}>"


      let valueType (vt: LanguageTools.RuntimeTypes.ValueType) : String =
        match vt with
        | Known kt -> knownType kt
        | Unknown -> "_"


      module Dval =
        let valueTypeName (dv: LanguageTools.RuntimeTypes.Dval) : String =
          dv |> LanguageTools.RuntimeTypes.Dval.toValueType |> valueType

        let makeSpaces (len: Int64) : String =
          (Stdlib.List.repeat len " ") |> Builtin.unwrap |> Stdlib.String.join ""

        let withIndent
          (indent: Int64)
          (dv: LanguageTools.RuntimeTypes.Dval)
          : String =
          let nl = "\n" ++ (makeSpaces indent)
          let inl = "\n" ++ (makeSpaces (indent + 2L))
          let indent = indent + 2L

          let valueTypeName = valueTypeName dv

          match dv with
          | DUnit -> "()"

          | DBool true -> "true"
          | DBool false -> "false"

          | DChar c ->
            let c = Stdlib.Char.toString c
            $"'{c}'"
          | DString s -> $"\"{s}\""

          | DInt64 i -> Builtin.int64ToString i
          | DUInt64 i -> Builtin.uint64ToString i
          | DInt8 i -> Builtin.int8ToString i
          | DUInt8 i -> Builtin.uint8ToString i
          | DInt16 i -> Builtin.int16ToString i
          | DUInt16 i -> Builtin.uint16ToString i
          | DInt32 i -> Builtin.int32ToString i
          | DUInt32 i -> Builtin.uint32ToString i
          | DInt128 i -> Builtin.int128ToString i
          | DUInt128 i -> Builtin.uint128ToString i

          | DFloat f -> Stdlib.Float.toString f // CLEANUP: deal with Infinity, NegativeInfinity, and NaN

          | DDateTime d -> $"<{valueTypeName}: {Stdlib.DateTime.toString d}>"

          | DUuid uuid -> $"<{valueTypeName}: {Stdlib.Uuid.toString uuid}>"



          | DList(vt, l) ->
            if Stdlib.List.isEmpty l then
              $"{valueTypeName} []"
            else
              let elems =
                Stdlib.String.join
                  (Stdlib.List.map l (fun item -> withIndent indent item))
                  ", "

              $"[{inl}{elems}{nl}]"

          | DTuple(first, second, theRest) ->
            let l = Stdlib.List.append [ first; second ] theRest

            let parts = Stdlib.List.map l (fun item -> withIndent indent item)

            let short = Stdlib.String.join parts ", "

            if Stdlib.String.length short <= 80L then
              $"({short})"
            else
              let long = Stdlib.String.join parts $"{inl}, "

              $"({inl}{long}{nl})"

          | DRecord(_, typeName, typeArgs, o) ->
            let strs =
              o
              |> Stdlib.Dict.toList
              |> Stdlib.List.map (fun pair ->
                let (key, value) = pair
                $"{key}: {withIndent indent value}")

            let elems = Stdlib.String.join strs $",{inl}"
            let typeStr = typeName typeName

            let typeArgsPart =
              match typeArgs with
              | [] -> ""
              | args ->
                args
                |> Stdlib.List.map (fun t -> valueTypeName t)
                |> Stdlib.String.join ", "
                |> fun betweenBrackets -> "<" + betweenBrackets + ">"

            typeStr ++ typeArgsPart ++ " {" ++ inl ++ elems ++ nl ++ "}"

          | DDict(_, d) ->
            if d == Stdlib.Dict.empty then
              "{}"
            else
              let strs =
                d
                |> Stdlib.Dict.toList
                |> Stdlib.List.map (fun pair ->
                  let (key, value) = pair
                  $"{key}: {withIndent indent value}")

              let elems = Stdlib.String.join strs $",{inl}"
              "{" ++ inl ++ elems ++ nl ++ "}"

          | DEnum(_, typeName, typeArgs, caseName, fields) ->
            let typeArgsPart =
              match typeArgs with
              | [] -> ""
              | typeArgs ->
                typeArgs
                |> Stdlib.List.map (fun typeArg -> valueType typeArg)
                |> Stdlib.String.join ", "
                |> fun parts -> $"<{parts}>"

            let short =
              let fieldStr =
                fields
                |> Stdlib.List.map (fun value -> withIndent indent value)
                |> Stdlib.String.join ", "

              let fieldStr = if fieldStr == "" then "" else $"({fieldStr})"

              let typeStr = typeName typeName
              $"{typeStr}{typeArgsPart}.{caseName}{fieldStr}"

            if Stdlib.String.length short <= 80L then
              short
            else
              let fieldStr =
                fields
                |> Stdlib.List.map (fun value -> withIndent indent value)
                |> Stdlib.String.join $",{inl}"

              let fieldStr = if fieldStr == "" then "" else $"({inl}{fieldStr}{nl})"

              let typeStr = typeName typeName
              $"{typeStr}{typeArgsPart}.{caseName}{fieldStr}"


          | DFnVal(NamedFn fnName) -> PrettyPrinter.RuntimeTypes.fnName fnName

          | DFnVal(Lambda impl) ->
            // Note: this use case is safe (RE docs/dblock-serialization.md)
            let ps =
              impl.parameters
              |> Stdlib.List.map Stdlib.Tuple2.second
              |> Stdlib.String.join ", "

            // TODO
            // let body = impl.body |> RuntimeTypes.Expr.toString
            $"\\ {ps} {{ ... }}"


          | DDB name -> $"<{valueTypeName}: {name}>"



      let dval (dv: LanguageTools.RuntimeTypes.Dval) : String = Dval.withIndent 0L dv