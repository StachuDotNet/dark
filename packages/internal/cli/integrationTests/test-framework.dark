module Darklang =
  module Internal =
    module Cli =
      module IntegrationTests =
        module TestFramework =
          type InteractiveStep =
            | SendInput of input: String
            | ExpectOutput of pattern: String
            | Wait of milliseconds: Int64
            | SendQuit

          type InteractiveCliTest =
            { name: String
              steps: List<InteractiveStep>
              timeoutSeconds: Int64 }

          type CliTest =
            { name: String
              arguments: List<String>
              expectedOutputFile: String
              isInteractive: Bool
              interactiveTest: Stdlib.Option.Option<InteractiveCliTest> }

          type TestResult =
            | Success of message: String
            | Failure of message: String
            | SetupComplete of message: String


          let safeFileCleanup (filePath: String): Unit =
            (Stdlib.Cli.Unix.removeFile filePath)
            |> Stdlib.Result.withDefault (fun e ->
              Builtin.printLine $"Failed to remove file {filePath}: {e}"
            )

          let makeCliTest
            (name: String)
            (arguments: List<String>)
            (expectedOutputFile: String): CliTest =
            CliTest
              { name = name
                arguments = arguments
                expectedOutputFile = expectedOutputFile
                isInteractive = false
                interactiveTest = Stdlib.Option.Option.None }

          let makeInteractiveCliTest
            (name: String)
            (steps: List<InteractiveStep>)
            (timeoutSeconds: Int64): CliTest =
            let interactiveTest =
              InteractiveCliTest
                { name = name
                  steps = steps
                  timeoutSeconds = timeoutSeconds }
            CliTest
              { name = name
                arguments = []
                expectedOutputFile = ""
                isInteractive = true
                interactiveTest = Stdlib.Option.Option.Some interactiveTest }


          let createActualExpectedDirectories (): Stdlib.Result.Result<Unit, String> =
            (Stdlib.Cli.Unix.ensureDirectoryExists (TestConfig.getActualDir ()))
            |> Stdlib.Result.andThen (fun _ ->
              Stdlib.Cli.Unix.ensureDirectoryExists (TestConfig.getExpectedDir ()))


          module InteractiveTestRunner =
            // Generates input commands for expect script
            let generateInputCommand (input: String): String =
              let escapedInput = TestUtils.escapeForExpect input
              $"send \"{escapedInput}\\r\""  // Send the whole command + Enter

            // Find expect executable location
            let findExpectExecutable (): Stdlib.Result.Result<String, String> =
              let whichResult = Stdlib.Cli.Unix.findCommandPath "expect"
              if whichResult.exitCode == 0L then
                Stdlib.Result.Result.Ok (Stdlib.String.trim whichResult.stdout)
              else
                Stdlib.Result.Result.Error "expect command not found. This is unexpected, as expect is installed during the build"

            // Convert a single step into expect script command
            let stepToExpectCommand (step: InteractiveStep): String =
              match step with
              // SendInput: Simulates user typing a command
              | SendInput input -> generateInputCommand input

              // ExpectOutput: Waits for a pattern to appear in CLI output
              // If pattern doesn't appear within timeout, test fails
              | ExpectOutput pattern ->
                $"expect {{\n  -re \"{pattern}\" {{}}\n  timeout {{ puts \"TIMEOUT: Expected '{pattern}'\"; exit 1 }}\n  eof {{ puts \"EOF: Process ended waiting for '{pattern}'\"; exit 1 }}\n}}"
              | Wait milliseconds -> $"after {Stdlib.Int64.toString milliseconds}"
              | SendQuit -> $"send \"\\033\"" // Escape key to quit the CLI

            // Generates a complete expect script that automates CLI interaction
            let generateExpectScript (steps: List<InteractiveStep>) (timeoutSeconds: Int64): Stdlib.Result.Result<String, String> =
              match findExpectExecutable () with
              | Error e -> Stdlib.Result.Result.Error e
              | Ok expectPath ->
                // Script header: shebang, timeout setting, and spawn CLI process
                let header = $"#!{expectPath} -f\nset timeout {Stdlib.Int64.toString timeoutSeconds}\nspawn ./scripts/run-cli\nsleep 1\n"

                // Convert each test step into expect script commands
                let stepCommands =
                  steps
                  |> Stdlib.List.map InteractiveTestRunner.stepToExpectCommand
                  |> Stdlib.String.join "\n"

                // Script footer: wait for CLI process to end cleanly
                let footer = "expect eof\n"

                Stdlib.Result.Result.Ok $"{header}{stepCommands}\n{footer}"

            let runInteractiveTest (interactiveTest: InteractiveCliTest): TestResult =
              match generateExpectScript interactiveTest.steps interactiveTest.timeoutSeconds with
              | Error e -> TestResult.Failure $"Failed to generate expect script: {e}"
              | Ok expectScript ->
                let expectFile = $"{TestConfig.testDir}/temp-expect-{TestUtils.safeFileName interactiveTest.name}.exp"
                match TestUtils.writeFileContent expectFile expectScript with
                | Error e -> TestResult.Failure $"Failed to write expect script: {e}"
                | Ok _ ->
                  match Stdlib.Cli.Unix.grantExecutePermission expectFile with
                  | Error e -> TestResult.Failure $"Failed to make expect script executable: {e}"
                  | Ok _ ->
                    // Run the expect script and capture all output
                    let result = Stdlib.Cli.Unix.executeInDirectoryWithOutput TestConfig.projectRoot expectFile
                    TestFramework.safeFileCleanup expectFile

                    if result.exitCode == 0L then
                      TestResult.Success $"Interactive test {interactiveTest.name} passed - all ExpectOutput validations succeeded"
                    else
                      let errorOutput = Stdlib.String.trim result.stdout
                      let specificError =
                        if Stdlib.String.contains errorOutput "TIMEOUT: Expected" then
                          // Extract which pattern failed
                          let parts = Stdlib.String.split errorOutput "TIMEOUT: Expected '"
                          if Stdlib.List.length parts >= 2L then
                            let afterPattern = Stdlib.List.getAt parts 1L
                            match afterPattern with
                            | Some patternPart ->
                              let patternEnd = Stdlib.String.split patternPart "'"
                              let pattern = Stdlib.List.getAt patternEnd 0L
                              match pattern with
                              | Some p -> $"TIMEOUT: Expected pattern '{p}' was not found"
                              | None -> "TIMEOUT: Pattern matching failed"
                            | None -> "TIMEOUT: Pattern matching failed"
                          else
                            // If parsing fails, show the full error output
                            errorOutput
                        else if Stdlib.String.contains errorOutput "EOF: Process ended" then
                          // Extract pattern from EOF message
                          let parts = Stdlib.String.split errorOutput "EOF: Process ended waiting for '"
                          if Stdlib.List.length parts >= 2L then
                            let afterPattern = Stdlib.List.getAt parts 1L
                            match afterPattern with
                            | Some patternPart ->
                              let patternEnd = Stdlib.String.split patternPart "'"
                              let pattern = Stdlib.List.getAt patternEnd 0L
                              match pattern with
                              | Some p -> $"EOF: CLI process ended unexpectedly while waiting for '{p}'"
                              | None -> "EOF: CLI process ended unexpectedly"
                            | None -> "EOF: CLI process ended unexpectedly"
                          else
                            "EOF: CLI process ended unexpectedly"
                        else
                          // If it doesn't match our patterns, show the full error output
                          if Stdlib.String.isEmpty errorOutput then
                            "Interactive test failed with no error output"
                          else
                            $"Interactive test failed: {errorOutput}"

                      TestUtils.printlnError $"FAIL - {interactiveTest.name}"
                      TestUtils.printlnColored Cli.Colors.red specificError
                      TestResult.Failure $"Interactive test {interactiveTest.name} failed - {specificError}"


          let runCliTest (config: CliTest): TestResult =
            if config.isInteractive then
              match config.interactiveTest with
              | Some interactiveTest -> InteractiveTestRunner.runInteractiveTest interactiveTest
              | None -> TestResult.Failure "Interactive test configuration missing"
            else
              let expectedFile = TestConfig.getExpectedFilePath config.expectedOutputFile
              let actualFile = TestConfig.getActualFilePath config.name
              let command = TestConfig.buildCliCommand config.arguments
              Builtin.printLine $"Running CLI command: {command}"

              match createActualExpectedDirectories () with
              | Error e -> TestResult.Failure $"Failed to create directories: {e}"
              | Ok _ ->
                let runCommand = Stdlib.Cli.Unix.executeInDirectoryAndRedirectToFile TestConfig.projectRoot command actualFile
                match runCommand with
                | Error e ->
                  TestUtils.printlnError "CLI command failed"
                  Builtin.printLine "CLI output:"
                  match TestUtils.getFileContent actualFile with
                  | Ok content when Stdlib.Bool.not (Stdlib.String.isEmpty content) ->
                    Builtin.printLine content
                  | _ ->
                    Builtin.printLine "No output captured"
                  TestResult.Failure $"CLI command failed: {command}\nError: {e}"
                | Ok _ ->
                  let hasContent =
                    match TestUtils.getFileContent actualFile with
                    | Ok content -> Stdlib.Bool.not (Stdlib.String.isEmpty content)
                    | Error _ -> false

                  if Stdlib.Bool.not hasContent then
                    TestUtils.printlnError "Output file is empty."
                    TestResult.Failure "Output file is empty"
                  else
                    if Stdlib.Bool.not (Stdlib.Cli.Unix.fileExists expectedFile) then
                      TestUtils.printlnWarning $"Expected output file not found: {expectedFile}"
                      TestUtils.printlnInfo "Creating it with current output for future comparisons"
                      match TestUtils.getFileContent actualFile with
                      | Ok content ->
                        match TestUtils.writeFileContent expectedFile content with
                        | Ok _ ->
                          TestUtils.printlnSuccess "Test setup complete. Expected output saved."
                          Builtin.printLine ""
                          TestResult.SetupComplete "Expected output file created"
                        | Error e ->
                          TestResult.Failure $"Failed to create expected file: {e}"
                      | Error e ->
                        TestResult.failure $"Failed to read actual output file: {e}"
                    else
                      let areFilesIdentical = Stdlib.Cli.Unix.areFilesIdentical expectedFile actualFile
                      if areFilesIdentical then
                        TestFramework.safeFileCleanup actualFile
                        TestResult.Success $"{config.name} output matches expected"
                      else
                        TestUtils.printlnError $"FAIL - {config.name} output differs from expected"
                        Builtin.printLine ""
                        TestUtils.printlnColored Cli.Colors.blue "📄 Detailed diff:"
                        Builtin.printLine "-----------------"
                        TestUtils.printlnColored Cli.Colors.yellow "Expected vs Actual:"
                        let diffOutput = Stdlib.Cli.Unix.showDiff expectedFile actualFile
                        match diffOutput.exitCode with
                        | 0L ->
                          Builtin.printLine "No differences found"
                          TestResult.Success $"{config.name} output matches expected"
                        | 1L ->
                          Builtin.printLine diffOutput.stdout
                          Builtin.printLine ""
                          TestUtils.printMessageWithBorder
                            "Tip: If the new output is correct, update expected with:"
                            $"cp \"{actualFile}\" \"{expectedFile}\""
                          Builtin.printLine ""
                          TestResult.Failure $"{config.name} output differs from expected"
                        | _ ->
                          TestResult.Failure $"Failed to generate diff: {diffOutput.stderr}"


          let getRecordCommand (config: CliTest): String =
            if config.isInteractive then
              "./scripts/run-cli"
            else
              TestConfig.buildCliCommand config.arguments

          let getInteractiveSteps (config: CliTest): List<InteractiveStep> =
            if config.isInteractive then
              match config.interactiveTest with
              | Some test -> test.steps
              | None -> []
            else
              []

          let testResultToExitCode (result: TestResult): Int64 =
            match result with
            | Success _ -> 0L
            | SetupComplete _ -> 0L
            | Failure _ -> 1L
