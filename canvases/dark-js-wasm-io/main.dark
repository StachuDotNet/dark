[<HttpHandler("GET", "/client.dark")>]
let _handler _req =
  match Experiments.readFromCanvases "dark-js-wasm-io/client.dark" with
  | Ok sourceInBytes ->
    let program =
      Experiments.parseAndSerializeProgram (String.fromBytes sourceInBytes)

    match program with
    | Ok program ->
      let types = Option.withDefault (Dict.get_v2 program "types") "[]"
      let fns = Option.withDefault (Dict.get_v2 program "fns") "[]"
      let exprs = Option.withDefault (Dict.get_v2 program "exprs") "[]"

      let json = "{ \"types\": " ++ types ++ ", \"fns\": " ++ fns ++ ", \"exprs\": " ++ exprs ++ "}"

      Http.responseWithHeaders
        (String.toBytes json)
        (Dict.fromListOverwritingDuplicates [ ("content-type","application-json")])
        200

    | Error _err -> Http.response (String.toBytes "Couldn't parse the program") 500
  | Error _err -> Http.response (String.toBytes "Couldn't load client.dark from disk") 500


[<HttpHandler("GET", "/")>]
let _handler _req =
  let body =
    """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WASM <--> JS Counter App</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
</head>

<body>
  <div id="app" class="container">
    <section class="section">
      <div class="level">
        <div class="level-item">
          <div>
            <p class="title">{{ state }}</p>
          </div>
        </div>
      </div>
      <div class="level">
        <div class="level-item">
          <div>
            <button class="button is-primary" @click="eventHappened({ eventName: 'increment', data: '' })">Increment</button>
            <button class="button is-danger" @click="eventHappened({ eventName: 'decrement', data: '' })">Decrement</button>
          </div>
        </div>
      </div>
      <div class="level">
        <div class="level-item">
          <div>
            <input class="input" type="number" v-model.number="newCounterValue">
            <button class="button is-info"
              @click="eventHappened({ eventName: 'setCounter', data: JSON.stringify(newCounterValue) })">Set
              Counter</button>
          </div>
        </div>
      </div>
    </section>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
  <script src="http://dark-serve-static.dlio.localhost:11003/editor-bootstrap.js"></script>
  <script>
    (async () => {
      const darklang = await Darklang.init();
      await darklang.loadClient("http://dark-js-wasm-io.dlio.localhost:11003/client.dark");

      // TODO: use
      const app = new Vue({
        el: '#app',
        data: { state: 0, newCounterValue: 0 },
        methods: {
          // handle state updated by WASM
          updateState(newState) {
            this.state = newState;
          },

          // something happened in the UI - tell the WASM'd Dark program!
          async eventHappened(event) {
            const response = await darklang.handleEvent(event);
            console.log("response", response)
          },
        },
        mounted() {
          window.stateUpdated = (newState) => {
            this.updateState(JSON.parse(newState));
          };
        },
      });
    })();
  </script>
</body>
</html>
  """

  Http.responseWithHeaders (String.toBytes body) (Dict.fromListOverwritingDuplicates [("Content-Type", "text/html")]) 200
