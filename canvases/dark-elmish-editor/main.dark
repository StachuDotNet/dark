// Stuff we publish in a package (i.e. DarkComponent)
// that users can base their eternal elm-ish apps on.
type HtmlViewComponent<'Msg> =
  | Div of List<ViewComponent<'Msg>>
  | Text of String
  | Button of label: String * onClick: Option<'Msg -> Unit>

type Component<'Model, 'Msg> =
  { InitState: 'Model

    Update: ('Model * 'Msg) -> 'Model

    // 'Msg -> Unit is 'emit' (TODO: when we support abbreviations, extract an Emit type out)

    // TODO: make generic over 'ViewComponent' so we can support non-html view engines
    Views: List<(string, ('Model, 'Msg -> Unit) -> HtmlViewComponent<'Msg>)> }



// Minimal demo component
type CounterMsg = Increment | Decrement | Reset

let counterUpdate (model: int) (msg: CounterMsg) =
  match msg with
  | Increment -> model + 1
  | Decrement -> model - 1
  | Reset -> 0

let counterView (model: int) emit =
  Div
    [ Text (Int.toString model)
      Button ("Increment", Some (fun _ -> emit Increment))
      Button ("Decrement", Some (fun _ -> emit Decrement))
      Button ("Reset", Some (fun _ -> emit Reset)) ]

let counterComponent: Component<Int, CounterMsg> =
  { InitState = 0
    Update = counterUpdate
    Views = [ "default", counterView ] }



// Update
type Msg<'UserMsg> =
  | ShowThing of Dark.Thing
  | UpdatePrompt of string
  | HandlePromptSuggestions of ...
  | EditHandlerCode of handlerId: id * code: string
  | Undo
  | ? CommitChanges
  | UserMsg of 'UserMsg

[<DB("MsgHistory")>]
let MsgHistory: List<Msg> = []

let update (state: Model, msg: Msg): Model =
	match msg with
  |

let currentState (currentUser: Dark.User) =
  TODO: fold the message list on top of blankModel


// View
let view(model: Model, emit: Msg -> unit): string =
  let body = Json.serialize<Model> model
  """
  <html>
  <body>${body}</div>
  <script>(refresh self sometimes)</script>
  </html>
  """

[<HttpHandler.Endpoint("POST", "/")>]
let updateEndpoint(req: HttpHandler.Req): HttpHandler.Resp =
  let msg = Json.parse<Msg>(req.body)
  // add to list
  // make editor refresh?


[<HttpHandler.Endpoint("GET", "/")>]
let editor(req: HttpHandler.Req): HttpHandler.Resp =
  let currentUser = Dark.currentUser()
  let state = currentState()
  let html = view model
  HttpHandler.Resp
    { statusCode = 200
      headers = [("content-type", "application/html")]
      body = String.toBytes body }