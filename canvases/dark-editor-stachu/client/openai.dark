

// todo: throw this stuff into an OpenAI module?
type OpenAIChatCompletionRequestMessage =
  { role: String; content: String }
type OpenAIChatCompletionRequest =
  { model: String
    max_tokens: Int
    temperature: Float
    messages : List<OpenAIChatCompletionRequestMessage> }

type OpenAIChatCompletionResponseChoiceMessage = { content: String }
type OpenAIChatCompletionResponseChoice = { message: OpenAIChatCompletionResponseChoiceMessage }
type OpenAIChatCompletionResponse = { choices: List<OpenAIChatCompletionResponseChoice> }

let openAIcompletion (prompt: String): Result<String, String> =
  let apiKey =
    let url = "http://dark-editor.dlio.localhost:11003/openai-apikey-yikes"
    match WASM.HttpClient.request "get" url [] Bytes.empty with
    | Ok response -> response.body |> String.fromBytes

  let openAIRequest =
    OpenAIChatCompletionRequest
      { model = "gpt-3.5-turbo"
        max_tokens = 700
        temperature = 0.7
        messages = [OpenAIChatCompletionRequestMessage {role = "user"; content = prompt}] }

  match Json.serialize<OpenAIChatCompletionRequest> openAIRequest with
  | Ok reqBody ->
    let headers =
      [
        ("authorization", "Bearer " ++ apiKey)
        ("content-type", "application/json")
      ]

    let openAIResponse =
      WASM.HttpClient.request "POST" "https://api.openai.com/v1/chat/completions" headers (String.toBytes reqBody)

    match openAIResponse with
    | Ok r ->
      match Json.parse<OpenAIChatCompletionResponse> (String.fromBytes r.body) with
      | Ok r ->
        match List.head r.choices with
        | Just c -> Ok c.message.content

        | Nothing -> Error ("No choices returned")
      | Error err -> Error ("Couldn't parse open ai completino response - " ++ err)
    | Error e -> Error ("OpenAI API request failed\n" ++ e)
  | Error e -> Error ("Couldn't serialize request" ++ e)