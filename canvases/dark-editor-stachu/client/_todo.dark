



// // Models to interop with JS host
// // (TODO: wrap this in `module JS = `)
// type BotResponseJS

// type ChatHistoryItemJS =
//   | BotResponse of { author : string; body : String  }

// type ModelForJS =
//   // should be 1:1 with Model, but nice and serializeable
//   { systemPrompt : string
//     state : string
//     code: String
//     chatHistory: List<ChatHistoryItemJS> }

// // TODO: result
// let stateForJS (state: Model) : ModelForJS =
//   { systemPrompt = state.systemPrompt
//     state = match state.State with
//             | WaitingForFirstInput -> "WaitingForFirstInput"
//             | WaitingForUserInput -> "WaitingForUserInput"
//             | BotIsThinking -> "BotIsThinking"
//     chatHistory =
//       state.chatHistory
//       |> List.map (fun item ->
//            { author = match item.author with User -> "User" | Bot -> "Bot"
//              prompt = item.text }) }

// // TODO: result
// let modelFromJS (model: ModelForJS) : Model =
//   { SystemPrompt = Prompt model.systemPrompt
//     State =
//       match model.state with
//       | "WaitingForFirstInput" -> WaitingForFirstInput
//       | "WaitingForUserInput" -> WaitingForUserInput
//       | "BotIsThinking" -> BotIsThinking
//     ChatHistory =
//       model.chatHistory
//       |> List.map (fun item ->
//            { Author = match item.author with "User" -> User | "Bot" -> Bot
//              Prompt = item.text }) }


// type EventJS = { eventName: String; data: String }

// let msgOfJS (msg: EventJS) : Msg =
//   match msg.eventName with
//   | "userGavePrompt" -> UserGavePrompt (Prompt msg.data)
//   | "botResponded" -> BotResponded (Prompt msg.data)
//   | _ -> failwith "Couldn't parse event name"

// let msgToJS (msg: Msg) : EventJS =
//   match msg with
//   | UserGavePrompt prompt ->
//     { eventName = "userGavePrompt"
//       data = match prompt with Prompt p -> p }
//   | BotResponded prompt ->
//     { eventName = "botResponded"
//       data = match prompt with Prompt p -> p }