[<HttpHandler("GET", "/static/:path")>]
let _handler _req =
  let body =
    (Experiments.readFromStaticDir path)
    |> Result.withDefault Bytes.empty

  let contentType =
    match (String.split_v1 path ".") |> List.last_v2 |> Option.withDefault "" with
    | "wasm" -> "application/wasm"
    | "js" -> "text/javascript"
    | "dll" -> "application/octet-stream"
    | "dat" -> "application/octet-stream"
    | "blat" -> "application/octet-stream"
    | "json" -> "application/json"
    | _ -> "text/plain"

  let incomingHost =
    request.headers
    |> List.findFirst_v2 (fun t -> Tuple2.first t == "origin")
    |> Option.map_v1 (fun t -> Tuple2.second t)
    |> Option.withDefault "Couldn't find 'origin' request header to determine Access-Control-Allow-Origin"

  let headers =
    Dict.fromListOverwritingDuplicates
      [
        ("Access-Control-Allow-Origin", incomingHost)
        ("Access-Control-Allow-Credentials", "true")
        ("Content-type", contentType)
        ("Accept-Ranges", "bytes")
      ]

  Http.responseWithHeaders body headers 200

[<HttpHandler("GET", "/")>]
let _indexHandler _req =
  // TODO: HTML of a basic webpage, that references WASM stuff
  let body =
    """
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dark Tree-Sitter WASM demo</title>
    <style>
      * {font-size: 24px;}
      body, html { height: 100%; margin: 0; font-family: Arial, sans-serif }
      .container { display: flex; height: 100%; }
      .left-side, .middle, .right-side { flex: 1; padding: 10px; }
      .textarea { width: 100%; height: 95%; resize: none; }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="left-side">
        <label>Source code:</label>
        <textarea id="input-textarea" class="textarea">let add (a: Int) (b: Int): Int =
  let sum = a + b
  sum</textarea>
      </div>

      <div class="middle">
        <label>Syntax tree</label>
        <textarea id="syntax-textarea" class="textarea" disabled></textarea>
      </div>

      <div class="right-side">
        <label>Vanilla-serialized JSON of PT.UserFunction</label>
        <textarea id="right-textarea" class="textarea" disabled></textarea>
      </div>
    </div>
    <script src="/static/tree-sitter/tree-sitter.js" />
    <script>console.log('NOT SURE WHY I NEED THIS')</script>
    <script>
      function simplifyTree(cursor) {
        let children = [];

        if (cursor.gotoFirstChild()) {
          do {
            children.push(simplifyTree(cursor));
          } while (cursor.gotoNextSibling());

          cursor.gotoParent();
        }

        return {
          typ: cursor.nodeType,
          text: cursor.nodeText,
          fieldName: cursor.currentFieldName(),
          children: children,
        };
      }

      const Parser = window.TreeSitter;

      Parser.init().then(async () => {
        const parser = new Parser;

        const inputTextarea = document.getElementById("input-textarea");

        const Darklang = await Parser.Language.load("/static/tree-sitter/tree-sitter-darklang.wasm");
        parser.setLanguage(Darklang);

        async function syntaxTreeToUserFunction(tree) {
          try {
            const response = await fetch("/parse-user-function", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(tree)
            });

            if (!response.ok) {
              const err = await response.text();
              throw new Error("TODO", err);
            }

            const exprJson = await response.text(); // or maybe .json()?

            document.getElementById("right-textarea").value = exprJson;

            // TODO: now what? maybe eval via WASM?
            // TODO: the WASM part; now that we have a user function,
            //
            // - load it into wasm
            //   DotNet.invokeMethod("Wasm", "LoadExpr", exprJson);
            //
            // - run the fn (with some inputs)
            //   DotNet.invokeMethod("Wasm", "EvalExpr");
          } catch (error) {
            console.error("Error:", error);
          }
        }

        function sourceCodeToSyntaxTree () {
          const darkSourceCode = document.getElementById("input-textarea").value;
          const darkTree = parser.parse(darkSourceCode);
          window.tree = darkTree;

          let simpleTree = simplifyTree(darkTree.rootNode.walk());

          document.getElementById("syntax-textarea").value = JSON.stringify(simpleTree, null, 2);

          syntaxTreeToUserFunction(simpleTree);
        }

        inputTextarea.addEventListener("input", () => {
          sourceCodeToSyntaxTree();
        });
        sourceCodeToSyntaxTree();
      });
    </script>
  </body>
</html>
  """

  Http.responseWithHeaders (String.toBytes body) (Dict.fromListOverwritingDuplicates [("Content-Type", "text/html")]) 200


let gid (): Int =
  Int.random_v1 0 9223372036854775807


let err (msg: String): Unit =
  // TODO: maybe something with the msg?
  let _ = 1.0/0.0
  ()


type PTTypeReference =
  | TInt

// TODO: the types of the 'id' fields should be something more like `type id = Int`
type PTExpr =
  | EInt of id: Int * Int
  | ELet of id: Int * identifier: String * expr: PTExpr * body: PTExpr
  | EVariable of id: Int * String
  | EFnCall of id: Int * fnName: String * args : List<PTExpr>





type PTUserFunctionParameter =
  { id: Int
    name: String
    typ: PTTypeReference
    description: String }

type PTUserFunction =
  { tlid: Int
    name: String
    typeParams: List<Unit> // TODO
    parameters: List<PTUserFunctionParameter>
    returnType: PTTypeReference
    body: PTExpr
    infix: Bool
    description: String }


/// This is the 'universal' type that represents the output
/// of the tree-sitter parser.
type SyntaxTreeNode =
  { typ: String
    text: String
    fieldName: Option<String>
    children: List<SyntaxTreeNode> }

/// From a node, looks through its children for a single node
/// whose fieldName matches the one specified
///
/// TODO: should return Option<SyntaxTreeNode>
let getField (node: SyntaxTreeNode) (fieldName: String): SyntaxTreeNode =
  let children = node.children

  // TOOD: ensure only 1 child of this type exists
  // (right now this won't error if 2 of the same fieldName exist)
  let found =
    children
    |> List.findFirst_v2 (fun c ->
      match c.fieldName with
      | Just fName -> fName == fieldName
      | Nothing -> false
    )

  match found with
  | Just c -> c
  | Nothing -> err ("Could not 1 field of name" ++ fieldName ++ " in node " ++ node.typ)

let getText (node: SyntaxTreeNode): String =
  node.text

// TODO: should return Result<PTExpr, String>
let parseExprCase (node: SyntaxTreeNode): PTExpr =
  match node.typ with
  | "identifier" -> PTExpr.EVariable (gid(), getText node)

  | "integer" ->
    let i = Int.parse (getText node)
    PTExpr.EInt (gid(), i)

  | "let_expression" ->
    let identifier = (getField node "identifier") |> getText
    let expr = (getField node "expr") |> parseExpr
    let body = (getField node "body") |> parseExpr
    PTExpr.ELet (gid(), identifier, expr, body)

  | "function_call" ->
    let fnName = (getField node "fn") |> getText

    let args = getField node "args"
    let args =
      args.children
      |> List.map (fun c -> parseExpr c)

    PTExpr.EFnCall (gid(), fnName, args)

  | "infix_operation" ->
    let op = (getField node "operator") |> getText

    let id = gid()

    let left = parseExpr (getField node "left")
    let right = parseExpr (getField node "right")

    match op with
    | "+" -> PTExpr.EFnCall (id, "Int.add", [left; right])
    | "-" -> PTExpr.EFnCall (id, "Int.subtract", [left; right])


// TODO: should return Result<PTExpr, String>
let parseExpr (node: SyntaxTreeNode): PTExpr =
  if node.typ != "expression" then
    err "bad expr"

  match node.children with
  | [single] -> single |> parseExprCase
  | _ -> err "expression has 0 or 2+ children"


// TODO: should return Result<PTTypeReference, String>
let parseTypeReference (node: SyntaxTreeNode): PTTypeReference =
  // TODO: support additional types
  PTTypeReference.TInt


// TODO: handle unit params
// e.g. `let doSomething () = ...`
//
// TODO: should return Result<PTUserFunctionParameter, String>
let parseUserFunctionParam (node: SyntaxTreeNode): PTUserFunctionParameter =
  if node.typ != "fn_param_def" then
    err "fn param def wrong"

  PTUserFunctionParameter
    { id = gid()
      name = (getField node "identifier") |> getText
      typ = (getField node "typ") |> parseTypeReference
      description = "TODO" }


let parseUserFunctionParams (node: SyntaxTreeNode): List<PTUserFunctionParameter> =
  if node.typ != "fn_params_def" then
    err "fn params def wrong"

  // TODO: the grammar is currently kinda bad - fix it and then follow up here
  let first = getField node "first"
  let additional = getField node "additional"

  [ first; additional ]
  |> List.map(fun p -> parseUserFunctionParam p)


// TODO: should return Result<PTUserFunction, String>
let parseUserFunction (node: SyntaxTreeNode): PTUserFunction =
  if node.typ != "fn_def" then
    err "fn def wrong"

  let params = (getField node "params") |> parseUserFunctionParams

  PTUserFunction
    { tlid = gid()
      name = (getField node "name") |> getText
      parameters = params
      typeParams = []
      returnType = (getField node "return_type") |> parseTypeReference
      body = (getField node "body") |> parseExpr
      infix = false
      description = "TODO" }


/// This returns a Json-serialized PT.UserFunction that should be
/// able to be deserialized in WASM by Json.deserialize<PT.UserFunction>.
[<HttpHandler("POST", "/parse-user-function")>]
let _handler _req =
  // TODO: theoretically, we could even pass in the source code
  // instead of the serialized syntax tree, and then parse it
  // somehow in Dark?
  let reqBody = String.fromBytes_v0 request.body
  let synTree = Json.parse<SyntaxTreeNode> reqBody

  match synTree with
  | Ok root ->
    if root.typ != "source_file" then
      err "fn def wrong"

    let userFn =
      match root.children with
      | [userFunction] -> parseUserFunction userFunction

    match Json.serialize<PTUserFunction> userFn with
    | Ok serialized ->
      let respHeaders =
        Dict.fromListOverwritingDuplicates
          [ ("content-type", "application/json") ]

      Http.responseWithHeaders (String.toBytes serialized) respHeaders 200

    | Error e ->
      Http.responseWithHeaders (String.toBytes_v0 e) Dict.empty_v0 500

  | Error e ->
    Http.responseWithHeaders (String.toBytes_v0 e) Dict.empty_v0 400