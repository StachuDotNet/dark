// Model
type BotResponseItem =
  | Text of String
  | Code of String

type ChatHistoryItem =
  | BotResponse of List<BotResponseItem>
  | UserPrompt of String

type Model =
  { SystemPrompt: String
    ChatHistory: List<ChatHistoryItem> }

// Update
type Msg = | UserGavePrompt of String

let update (model: Model) (msg: Msg) : Model =
  match msg with
  | UserGavePrompt prompt ->
    // I guess, until we have cmds or something,
    // we have to deal with http calls and such in-line, like here
    let botResponseItems =
      let apiResponse = "TODO" // OpenAI.getCompletion prompt

      // for now, just return one big text item
      // TODO: later, extract out text and code sections
      [ BotResponseItem.Text apiResponse ]

    Model
      { SystemPrompt = model.SystemPrompt
        ChatHistory =
          List.append
            model.ChatHistory
            [
              ChatHistoryItem.UserPrompt prompt
              ChatHistoryItem.BotResponse botResponseItems
            ] }

/// Single point of communicating to JS host
///
/// Let the JS host know that the state has been updated,
/// so that it can update the UI accordingly.
let updateStateInJS (newState: Model): Result<Unit, String> =
  match Json.serialize<Model> newState with
  | Ok serialized ->
    let _ = WASM.Editor.callJSFunction "window.stateUpdated" [serialized]
    Ok ()
  | Error err ->
    Error "Couldn't serialize updated state"


/// Single point of communication from JS host
///
/// Listen for events from the JS host, and update the state accordingly.
let handleEvent (evt: String): Result<String, String> =
  match Json.parse<Msg> evt with
  | Ok rawEvent ->
    let currentState = WASM.getState<Model>

    let newState = update currentState msg

    // returns result, but let's assume it worked...
    let _ = setState newState

    updateStateInJS newState

  | Error err -> Error "Couldn't parse raw msg"


// Init
// (things to run on startup, before accepting any events
//  the initial state is set to the result of the final expr)
let systemPrompt =
  WASM.HttpClient.request "get" "http://dark-editor.dlio.localhost:11003/system-prompt" [] Bytes.empty

1+2 // useless -- just to prove we can

let initState =
  match systemPrompt with
  | Ok response ->
    Model
      { SystemPrompt = String.fromBytes response.body
        ChatHistory = [] }
  | Error err ->
    Model
      { SystemPrompt = String.fromBytes "nope"
        ChatHistory = [] }

updateStateInJS initState

initState



// TODO: result
let modelFromJS (model: ModelForJS) : Model =
  { SystemPrompt = Prompt model.systemPrompt
    State =
      match model.state with
      | "WaitingForFirstInput" -> WaitingForFirstInput
      | "WaitingForUserInput" -> WaitingForUserInput
      | "BotIsThinking" -> BotIsThinking
    ChatHistory =
      model.chatHistory
      |> List.map (fun item ->
           { Author = match item.author with "User" -> User | "Bot" -> Bot
             Prompt = item.text }) }


type EventJS = { eventName: String; data: String }

let msgOfJS (msg: EventJS) : Msg =
  match msg.eventName with
  | "userGavePrompt" -> UserGavePrompt (Prompt msg.data)
  | "botResponded" -> BotResponded (Prompt msg.data)
  | _ -> failwith "Couldn't parse event name"

let msgToJS (msg: Msg) : EventJS =
  match msg with
  | UserGavePrompt prompt ->
    { eventName = "userGavePrompt"
      data = match prompt with Prompt p -> p }
  | BotResponded prompt ->
    { eventName = "botResponded"
      data = match prompt with Prompt p -> p }


// Exposed to JS
let handleRawEvent (evt: String): Result<String, String> =
  match Json.parse<EventJS> evt with
  | Ok rawEvent ->
    match msgOfJS rawEvent with
    | Ok msg ->
      let currentState = WASM.getState<Model>

      let newState = update currentState msg

      // returns result, but let's assume it worked...
      let _ = setState newState

      let updatedJSModel = modelForJS newState

      match Json.serialize<ModelForJS> updatedJSModel with
      | Ok serialized -> WASM.callJSFunction "window.stateUpdated" [serialized]
      | Error err -> Error "Couldn't serialize updated state"

    | Error err -> Error "Couldn't parse msg from raw event"
  | Error err -> Error "Couldn't parse raw msg"


// things to run on startup
init()






// TODO
// type OpenAICompletionRequest = {
//   model: String
//   max_tokens: Int
//   temperature: Float
//   prompt : String
// }

// [<HttpHandler("POST", "/api/handle-user-prompt")>]
// let _handler _req =
//   let openAIRequest =
//     OpenAICompletionRequest
//       { model = "text-davinci-003"
//         max_tokens = 700
//         temperature = 0.7
//         prompt = String.fromBytes request.body }

//   match Json.serialize<OpenAICompletionRequest> openAIRequest with
//   | Ok reqBody ->
//     let headers =
//       [
//         ("Authorization", "Bearer " ++ OPENAI_API_KEY)
//         ("Content-Type", "application/json")
//       ]

//     let openAIResponse =
//       HttpClient.request "POST" "https://api.openai.com/v1/completions" headers (String.toBytes reqBody)

//     match openAIResponse with
//     | Ok r -> Http.response (r.body) 200
//     | Error e -> Http.response (String.toBytes "OpenAI API request failed") 500

//   | Error _e -> Http.response (String.toBytes "Couldn't serialize request") 400