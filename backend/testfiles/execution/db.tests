[<DB>] type X = { x : string }
[<DB>] type Z = { x : char }
[<DB>] type Lists = { strs : List<string>; ints : List<int> }
[<DB>] type XY = { x : string; y: string }
[<DB>] type SortedX = { x : string; sortBy: int }
[<DB>] type Timestamp = { ts : DateTime }
[<DB>] type Uuid = { uu : UUID }

module RoundtripUnit =
  // CLEANUP () should have been removed and shouldn't work here
  (let _ = DB.set_v1 {| x = () |} "hello" X
   DB.get_v2 "hello" X) = Just {| x = () |}

module RoundtripCaseInsensitive =
  [<DB>] type Insensitive = {| cOlUmNnAmE : string |}
  (let _ = DB.set_v1 { cOlUmNnAmE = "some value" } "hello" Insensitive
   DB.get_v2 "hello" Insensitive) = Just { cOlUmNnAmE = "some value" }

module RoundtripPassword =
  [<DB>] type Passwords = { password : Password }
  (let pw = Password.hash_v0 "password" in
   let x = DB.set_v1 { password = pw } "test" Passwords in
   let y = (DB.queryOneWithExactFields_v0 { password = pw } Passwords) |> Test.unwrap in
   Password.check_v0 y.password "password") = true

module RoundtripLists =
  (let _ = DB.set_v1 { strs = ["str1"; "str2"]; ints = [-1,6,0]} "lists" Lists in
  DB.get_v2 "lists" Lists) = Just { strs = ["str1"; "str2"]; ints = [-1,6,0]}


module ValueMissingColumnGivesGoodError =
  (DB.set_v1 {| x = "x"; col = "v" } "i" X) = Test.typeError_v0 "Found but did not expect: [col]"



module Schemas =
  DB.schemaFields_v1 X = ["x"]
  DB.schemaFields_v1 XY = ["x", "y"]
  DB.schema_v1 X = { x = "Str" }
  DB.schema_v1 SortedX = { x = "Str"; sortBy = "Int" }



module SetDoesUpsert =
  (let old = DB.set_v1 { x = "hello" } "hello" X in
  let newval = DB.set_v1 { x = "goodbye" } "hello" X in
  DB.getAllWithKeys_v2 X) = { hello = { x = "goodbye"} }

module SetCharUpserts =
  (let old = DB.set_v1 { x = 'a' } "a" Z in
  let newval = DB.set_v1 { x = 'b' } "a" Z in
  DB.getAllWithKeys_v2 Z) = { a = { x = 'b'} }




module QueryExactFields =
  (let dontfind = DB.set_v1 {x = "hello"; y = "goodbye" } "hello" XY in
  let hopetofind = DB.set_v1 { x = "goodbye"; y = "hello" } "findme" XY in
  DB.queryExactFields { x = "goodbye" } XY) = [{ x = "goodbye"; y = "hello" }]

module Get =
  // return nothing for empty store
  (DB.get_v2 "lol" X) = Nothing

  // return nothing for invalid key
  (let _ = DB.set_v1 { x = "hello" } "key" X in
   DB.get_v2 "lol" X) = Nothing

  // returns single value
  (let _ = DB.set_v1 { x = "hello" } "key" X in
   DB.get_v2 "key" X) = Just { x = "hello" }

  // returns correct value given reassigned entry
  (let _ = DB.set_v1 { x = "hello" } "key" X in
   let _ = DB.set_v1 { x = "goodbye" } "key" X in
   DB.get_v2 "key" X) = Just { x = "goodbye" }

  // returns value given multiple entries
  (let _ = DB.set_v1 { x = "pancake" } "key1" X in
   let _ = DB.set_v1 { x = "waffle" } "key2" X in
   let _ = DB.set_v1 { x = "scone" } "key3" X in
   DB.get_v2 "key2" X) = Just { x = "waffle" }



module GetAll =
  (let one = DB.set_v1 { x = "hello"; sortBy = 0 } "one" SortedX in
   let two = DB.set_v1 { x = "goodbye"; sortBy = 1  } "two" SortedX in
   let three = DB.set_v1 { x = "howdy"; sortBy = 2  } "three" SortedX in
   (DB.getAll_v3 SortedX)
   |> List.sortBy_v0 (fun x -> x.sortBy)) =
     [ { x = "hello"; sortBy = 0}
     ; { x = "goodbye"; sortBy = 1}
     ; { x = "howdy"; sortBy = 2}]


module GetAllKeys =
  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   (DB.keys_v1 X) |> List.sort_v0) = [ "one"; "two" ]


module GetAllWithKeys =
  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   DB.getAllWithKeys_v2 X) = { one = { x = "hello"} ; two = { x = "goodbye"} }


module GetManyWithKeys =
  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   DB.getManyWithKeys_v1 ["one"; "two"] X) = { one = { x = "hello"} ; two = { x = "goodbye"} }


module GetExisting =
  (let one = DB.set_v1 { x = "hello" } "one" X in
  let two = DB.set_v1 { x = "goodbye" } "two" X in
  DB.getExisting_v0 ["three"; "two"] X) = [ { x = "goodbye" } ]


module GetMany =
  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   DB.getMany_v3 ["three"; "two"] X) = Nothing

  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   DB.getMany_v3 ["one"; "two"] X) = Just [ { x = "hello"}; { x = "goodbye"}]


module QueryWithKey =
  (let one = DB.set_v1 { x = "hello"; sortBy = 0 } "one" SortedX in
   let two = DB.set_v1 { x = "goodbye"; sortBy = 1  } "two" SortedX in
   let three = DB.set_v1 { x = "goodbye"; sortBy = 2  } "three" SortedX in
   DB.queryExactFieldsWithKey_v0 { x = "goodbye" } SortedX) = { two = { x = "goodbye"; sortBy = 1}; three = { x = "goodbye"; sortBy = 2} }


module QueryOneWithExactFieldsWithKey =
  (let one = DB.set_v1 { x = "hello" } "one" X in
   DB.queryOneWithExactFieldsWithKey { x = "goodbye" } X) = Nothing

  DB.queryOneWithExactFieldsWithKey { x = "goodbye" } X = Nothing

  (let one = DB.set_v1 { x = "hello" } "one" X in
   let two = DB.set_v1 { x = "hello" } "two" X in
   DB.queryOneWithExactFieldsWithKey { x = "hello" } X) = Nothing

  // chars
  (let one = DB.set_v1 { x = 'a' } "one" Z in
   DB.queryOneWithExactFieldsWithKey { x = 'b' } Z) = Nothing

module Delete =
  (let one = DB.set_v1 { x = "hello"} "one" X in
   let delete = DB.delete_v1 "one" X in
   DB.getAllWithKeys_v2 X) = {}

  // delete nothing
  (let one = DB.set_v1 { x = "hello"} "one" X in
   let delete = DB.delete_v1 "two" X in
   DB.getAllWithKeys_v2 X) = { one = { x = "hello"} }

  // deletes only one
  (let one = DB.set_v1 { x = "hello"} "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   let delete = DB.delete_v1 "one" X in
   DB.getAllWithKeys_v2 X) = { two = { x = "goodbye"} }

module DeleteAll =
  (let one = DB.set_v1 { x = "hello"} "one" X in
   let delete = DB.deleteAll_v1 X in
   DB.getAll_v3 X) = []

  // deletes all
  (let one = DB.set_v1 { x = "hello"} "one" X in
   let two = DB.set_v1 { x = "goodbye" } "two" X in
   let delete = DB.deleteAll_v1 X in
   DB.getAll_v3 X) = []

  // when empty
  (let delete = DB.deleteAll_v1 X in
   DB.getAll_v3 X) = []

module Count =
  // empty
  DB.count X = 0

  // one entries
  (let _ = DB.set_v1 { x = "hello" } "one" X in
   DB.count X) = 1

  // multiple entries
  (let _ = DB.set_v1 { x = "hello" } "one" X in
   let _ = DB.set_v1 { x = "goodbye" } "two" X in
   let _ = DB.set_v1 { x = "howdy" } "three" X in
   let _ = DB.set_v1 { x = "cheers" } "four" X in
   DB.count X) = 4

// ------------
// SqlCompiler queries
// ------------
[<DB>]
type Person = {
  name : string;
  human : bool;
  height : int;
  income : float;
  dob : DateTime
}

let addFriend (key: string) (name: string) (height: int) (human: bool) (dob: string) (income: float) =
  let dob = (DateTime.parse_v2 dob) |> Test.unwrap in
  let obj = { height = height; name = name; human = human; dob = dob; income = income } in
  DB.set_v1 obj key Person

let prepFriends () =
  (let _ = addFriend "ross" "Ross" 73 true "1967-05-12T00:00:00Z" 100.0 in
   let _ = addFriend "rachel" "Rachel" 65 true "1969-05-05T00:00:00Z" 82.0 in
   // Note spaces around Chandler, that's to test trim functions
   let _ = addFriend "chandler" " Chandler " 72 true "1969-08-19T10:13:42Z" 83.0 in
   let _ = addFriend "cat" "GrumpyCat" 10 false "2012-04-04T00:00:00Z"  0.0 in
   DB.set_v1 { height = (); name = (); human = (); dob = (); income = () } "()" Person)

let d (datestr:string) =
  (DateTime.parse_v2 datestr) |> Test.unwrap

let rossDOB () =
  d "1967-05-12T00:00:00Z"

let friendsError (lambda: ('a -> bool)) =
  let _ = prepFriends () in
  DB.query_v4 Person lambda

let friends (lambda: ('a -> bool)) =
  let _ = prepFriends () in
  (DB.query_v4 Person lambda)
  |> List.map_v0 (fun p -> p.name)
  |> List.sort_v0

// Test standard language features
module FindAll =
  (friends (fun p -> true)) = [(); " Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // with condition
  (friends (fun p -> p.height > 3)) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // boolean queries
  (friends (fun p -> p.human)) = [" Chandler "; "Rachel"; "Ross" ]

  // () equality works CLEANUP
  (friends (fun p -> p.name = () )) = [()]

  // () inequality works CLEANUP
  (friends (fun p -> p.name != () )) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // CLEANUP weird behaviour here - shouldn't the () object be returned here.
  // () is not '()' (string)
  (friends (fun p -> p.name != "()" )) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // &&
  (friends (fun p -> p.human && p.height > 66 )) = [" Chandler "; "Ross" ]

  // ||
  (friends (fun p -> p.human || p.height > 66 )) = [" Chandler "; "Rachel"; "Ross" ]

  // inlining
  (friends (fun p -> let x = 32 in p.height > x && true)) = [" Chandler "; "Rachel"; "Ross" ]

  // inlining field access
  (friends (fun p -> let x = p.height in true && x > 32 )) = [" Chandler "; "Rachel"; "Ross" ]

  // pipes
  (friends (fun p -> p.height |> (*) 2 |> (<) 40)) = ["GrumpyCat" ]

  //[test.db query with external variable] with DB Person
  // TODO pass an external var x
  //(friends (fun p -> p.height < x)) = ["GrumpyCat"]

  // fieldaccess
  (friends (fun p -> let obj = { x = 42 } in p.height > obj.x )) =
    [" Chandler "; "Rachel"; "Ross" ]

  // nested fieldaccess
  friends (fun p -> let obj = { field1 = { field2 = 42 } } in p.height > obj.field1.field2 ) =
    [" Chandler "; "Rachel"; "Ross" ]

  // lambda doesnt return a bool
  friendsError (fun p -> "x") =
    Test.sqlError "Incorrect type in string \"x\", expected Bool, but got a Str"

  // bad variable name
  friendsError (fun p -> let x = 32 in true && p.height > y) =
    Test.sqlError "This variable is not defined: y"

  // sql injection
  friendsError (fun p -> "; select * from users;" = p.name ) = []

  // CLEANUP we should catch this. See note about SqlBinOp in SqlCompiler.fs
  // invalid type comparison
  (let _ = Test.setExpectedExceptionCount 1 in
   friendsError (fun p -> p.height == "string")) =
     Test.sqlError "An error occurred while querying the Datastore"

  // do we look up dates correctly when the function type is not a date
  (let _ = Test.setExpectedExceptionCount 1 in
   friendsError (fun p -> p.dob != DateTime.now_v0)) =
     Test.sqlError "An error occurred while querying the Datastore"


module CompiledFunctions =
  (friends (fun p -> Float.lessThan_v0 90.0 p.income)) = [ "Ross" ]
  (friends (fun p -> Float.lessThanOrEqualTo_v0 p.income 82.10)) = ["GrumpyCat"; "Rachel"]
  (friends (fun p -> Float.greaterThan_v0 p.income 90.0)) = [ "Ross" ]
  (friends (fun p -> Float.greaterThanOrEqualTo_v0 82.10 p.income )) = ["GrumpyCat"; "Rachel"]
  (friends (fun p -> Int.lessThanOrEqualTo_v0 p.height 65)) = ["GrumpyCat"; "Rachel"]
  (friends (fun p -> Int.lessThan_v0 p.height 65)) = ["GrumpyCat"]
  (friends (fun p -> Int.greaterThanOrEqualTo_v0 p.height 65)) =  [" Chandler "; "Rachel"; "Ross" ]
  (friends (fun p -> Int.greaterThan_v0 p.height 65)) =  [" Chandler "; "Ross" ]
  (friends (fun p -> String.toLowercase_v1 p.name = "rachel")) = ["Rachel"]
  (friends (fun p -> String.toUppercase_v1 p.name = "RACHEL")) = ["Rachel"]
  (friends (fun p -> String.reverse_v0 p.name = "lehcaR")) = ["Rachel"]
  // Not implemented yet
  // (friends (fun p -> String.length_v1 p.name > 5)) = [" Chandler "; "GrumpyCat"; "Rachel" ]
  (friends (fun p -> String.contains_v0 p.name "ROSS")) = []
  (friends (fun p -> String.contains_v0 p.name "R")) = ["Rachel"; "Ross" ]
  (friends (fun p -> String.contains_v0 p.name "ZZZ")) = []
  (friends (fun p -> String.contains_v0 p.name "")) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]
  (friends (fun p -> String.replaceAll_v0 p.name "handle" "he" == " Cher ")) = [" Chandler " ]
  (friends (fun p -> String.replaceAll_v0 p.name " " "Xx" == "XxChandlerXx")) = [" Chandler " ]
  (friends (fun p -> String.replaceAll_v0 p.name "xxx" "notUsed" == " Chandler ")) = [" Chandler " ]
  (friends (fun p -> String.trim_v0 p.name == "Chandler")) = [" Chandler " ]
  (friends (fun p -> String.trimStart_v0 p.name == "Chandler ")) = [" Chandler " ]
  (friends (fun p -> String.trimEnd_v0 p.name == " Chandler")) = [" Chandler " ]
  (friends (fun p -> Bool.not_v0 p.human)) = ["GrumpyCat" ]
  (friends (fun p -> Bool.and_v0 p.human p.human)) =  [" Chandler "; "Rachel"; "Ross" ]
  (friends (fun p -> Bool.or_v0 p.human p.human)) =  [" Chandler "; "Rachel"; "Ross" ]
  (friends (fun p -> DateTime.lessThanOrEqualTo p.dob (d "2000-01-01T01:02:03Z"))) = [" Chandler "; "Rachel"; "Ross" ]
  (friends (fun p -> DateTime.lessThanOrEqualTo p.dob (rossDOB ()))) = ["Ross" ]
  (friends (fun p -> DateTime.lessThan p.dob (rossDOB ()))) = []
  (friends (fun p -> DateTime.greaterThanOrEqualTo p.dob (d "2000-01-01T01:02:03Z"))) = ["GrumpyCat"]
  (friends (fun p -> DateTime.greaterThanOrEqualTo p.dob (rossDOB ()))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]
  (friends (fun p -> DateTime.greaterThan p.dob (rossDOB ()))) = [" Chandler "; "GrumpyCat"; "Rachel" ]
  (friends (fun p -> DateTime.lessThanOrEqualTo p.dob (DateTime.add_v0 (DateTime.now_v0) 1 ))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross"]
  (friends (fun p -> DateTime.lessThanOrEqualTo p.dob (DateTime.subtractSeconds_v0 (DateTime.now_v0) 1 ))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross"]
  (friends (fun p -> DateTime.atStartOfDay_v0 p.dob == (d "1969-08-19T00:00:00Z"))) = [" Chandler "]
  (friends (fun p -> DateTime.hour_v2 p.dob == 10)) = [" Chandler "]
  (friends (fun p -> DateTime.day_v0 p.dob == 19)) = [" Chandler "]
  (friends (fun p -> DateTime.minute_v1 p.dob == 13)) = [" Chandler "]
  (friends (fun p -> DateTime.month_v0 p.dob == 8)) = [" Chandler "]
  (friends (fun p -> DateTime.second_v1 p.dob == 42)) = [" Chandler "]
  (friends (fun p -> DateTime.year_v0 p.dob == 1969)) = [" Chandler "; "Rachel" ]

module PartialEvaluation =
  // fieldAccesses outside query
  (let _ = prepFriends ()
   let x = { y = { z = { a = 5 }}}
   ((DB.query_v4 Person (fun p -> x.y.z.a < p.height))
   |> List.map_v0 (fun p -> p.name)
   |> List.sort_v0)) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // fieldAccesses inside query
  (friends (fun p -> let x = { y = { z = { a = 5 }}} in
                     x.y.z.a < p.height)) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

  // fieldAccesses inside query
  (friends (fun p -> let x = { y = { z = { a = [1;2;3;4;5] }}}
                     (x.y.z.a |> List.length_v0) < p.height)) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]


module QueryOneWithKey =
  // multiple
  (let _ = prepFriends () in
   DB.queryOneWithKey_v3 Person (fun p -> p.human)) = Nothing

  // none
  (let _ = prepFriends () in
   DB.queryOneWithKey_v3 Person (fun p -> p.name = "bob")) = Nothing

  // one
  (let _ = prepFriends () in
  (DB.queryOneWithKey_v3 Person (fun p -> p.name = "Rachel"))
   |> Option.map_v1 (fun v -> v.rachel.name)) = Just "Rachel"

   // interpolated
  (let _ = prepFriends () in
   let test = "ache" in
   (DB.queryOneWithKey_v3 Person (fun p -> p.name = $"R{test}l"))
   |> Option.map_v1 (fun v -> v.rachel.name)) = Just "Rachel"


module QueryWithKey =
  // none
  (let _ = prepFriends () in
   DB.queryWithKey_v3 Person (fun p -> p.name = "bob")) = Dict.empty

  // one
  (let _ = prepFriends () in
   (DB.queryWithKey_v3 Person (fun p -> p.name = "Rachel"))
   |> (fun v -> v.rachel.name)) = "Rachel"

module QueryCount =
  // none
  (let _ = prepFriends () in
   DB.queryCount_v0 Person (fun p -> p.name = "bob")) = 0

  // one
  (let _ = prepFriends () in
   DB.queryCount_v0 Person (fun p -> p.height > 3)) = 4

module Dates =

  let beforeDate () =
    d "1900-01-01T00:00:00Z"

  let middleDate () =
    d "2000-01-01T00:00:00Z"

  let afterDate () =
    d "2100-01-01T00:00:00Z"

  let prepDates () =
    (let _ = DB.set_v1 { ts = beforeDate () } "before" Timestamp in
    let _ = DB.set_v1 { ts = middleDate () } "middle" Timestamp in
    DB.set_v1 { ts = afterDate () } "after"  Timestamp)

  // DateTime.lessThan
  (let _ = prepDates () in
  DB.queryOne_v4 Timestamp (fun value -> DateTime.lessThan_v0 (middleDate ()) value.ts)) =
    Just ({ ts = afterDate () })

  // DateTime.greaterThan
  (let _ = prepDates () in
  DB.queryOne_v4 Timestamp (fun value -> DateTime.greaterThan_v0 (middleDate ()) value.ts)) =
    Just { ts = beforeDate () }

(DB.generateKey_v0 |> String.length_v1) = 36
